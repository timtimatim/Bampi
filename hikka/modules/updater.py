#             ‚ñà ‚ñà ‚ñÄ ‚ñà‚ñÑ‚ñÄ ‚ñÑ‚ñÄ‚ñà ‚ñà‚ñÄ‚ñà ‚ñÄ
#             ‚ñà‚ñÄ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà‚ñÄ‚ñà ‚ñà‚ñÄ‚ñÑ ‚ñà
#              ¬© Copyright 2022
#           https://t.me/hikariatama
#
# üîí      Licensed under the GNU AGPLv3
# üåê https://www.gnu.org/licenses/agpl-3.0.html

import asyncio
import atexit
import contextlib
import logging
import os
import subprocess
import sys
import time
import typing

import git
from git import GitCommandError, Repo

from telethon.tl.functions.messages import (
    GetDialogFiltersRequest,
    UpdateDialogFilterRequest,
)
from telethon.tl.types import DialogFilter, Message
from telethon.extensions.html import CUSTOM_EMOJIS

from .. import loader, utils, main, version

from ..inline.types import InlineCall

logger = logging.getLogger(__name__)


@loader.tds
class UpdaterMod(loader.Module):
    """Updates itself"""

    strings = {
        "name": "Updater",
        "source": (
            "<emoji document_id=5456255401194429832>üìñ</emoji> <b>Read the source code"
            " from</b> <a href='{}'>here</a>"
        ),
        "restarting_caption": (
            "<emoji document_id=6318970114548958978>üïó</emoji> <b>Your {} is"
            " restarting...</b>"
        ),
        "downloading": (
            "<emoji document_id=6318970114548958978>üïó</emoji> <b>Downloading"
            " updates...</b>"
        ),
        "installing": (
            "<emoji document_id=6318970114548958978>üïó</emoji> <b>Installing"
            " updates...</b>"
        ),
        "success": (
            "<emoji document_id=6321050180095313397>‚è±</emoji> <b>Restart successful!"
            " {}</b>\n<i>But still loading modules...</i>\n<i>Restart took {}s</i>"
        ),
        "origin_cfg_doc": "Git origin URL, for where to update from",
        "btn_restart": "üîÑ Restart",
        "btn_update": "üß≠ Update",
        "restart_confirm": "‚ùì <b>Are you sure you want to restart?</b>",
        "secure_boot_confirm": (
            "‚ùì <b>Are you sure you want to restart in secure boot mode?</b>"
        ),
        "update_confirm": (
            "‚ùì <b>Are you sure you"
            " want to update?\n\n<a"
            ' href="https://github.com/hikariatama/Hikka/commit/{}">{}</a> ‚§ë <a'
            ' href="https://github.com/hikariatama/Hikka/commit/{}">{}</a></b>'
        ),
        "no_update": "üö∏ <b>You are on the latest version, pull updates anyway?</b>",
        "cancel": "üö´ Cancel",
        "lavhost_restart": (
            "<emoji document_id=5469986291380657759>‚úåÔ∏è</emoji> <b>Your {} is"
            " restarting...</b>"
        ),
        "lavhost_update": (
            "<emoji document_id=5469986291380657759>‚úåÔ∏è</emoji> <b>Your {} is"
            " updating...</b>"
        ),
        "full_success": (
            "<emoji document_id=6323332130579416910>üëç</emoji> <b>Userbot is fully"
            " loaded! {}</b>\n<i>Full restart took {}s</i>"
        ),
        "secure_boot_complete": (
            "üîí <b>Secure boot completed! {}</b>\n<i>Restart took {}s</i>"
        ),
    }

    strings_ru = {
        "source": (
            "<emoji document_id=5456255401194429832>üìñ</emoji> <b>–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –º–æ–∂–Ω–æ"
            " –ø—Ä–æ—á–∏—Ç–∞—Ç—å</b> <a href='{}'>–∑–¥–µ—Å—å</a>"
        ),
        "restarting_caption": (
            "<emoji document_id=6318970114548958978>üïó</emoji> <b>–¢–≤–æ—è {}"
            " –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...</b>"
        ),
        "downloading": (
            "<emoji document_id=6318970114548958978>üïó</emoji> <b>–°–∫–∞—á–∏–≤–∞–Ω–∏–µ"
            " –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...</b>"
        ),
        "installing": (
            "<emoji document_id=6318970114548958978>üïó</emoji> <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞"
            " –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...</b>"
        ),
        "success": (
            "<emoji document_id=6321050180095313397>‚è±</emoji> <b>–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞"
            " —É—Å–ø–µ—à–Ω–∞! {}</b>\n<i>–ù–æ –º–æ–¥—É–ª–∏ –µ—â–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è...</i>\n<i>–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞"
            " –∑–∞–Ω—è–ª–∞ {} —Å–µ–∫</i>"
        ),
        "full_success": (
            "<emoji document_id=6323332130579416910>üëç</emoji> <b>–Æ–∑–µ—Ä–±–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é"
            " –∑–∞–≥—Ä—É–∂–µ–Ω! {}</b>\n<i>–ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–Ω—è–ª–∞ {} —Å–µ–∫</i>"
        ),
        "secure_boot_complete": (
            "üîí <b>–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! {}</b>\n<i>–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–Ω—è–ª–∞ {}"
            " —Å–µ–∫</i>"
        ),
        "origin_cfg_doc": "–°—Å—ã–ª–∫–∞, –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
        "btn_restart": "üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è",
        "btn_update": "üß≠ –û–±–Ω–æ–≤–∏—Ç—å—Å—è",
        "restart_confirm": "‚ùì <b>–¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è?</b>",
        "secure_boot_confirm": (
            "‚ùì <b>–¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ"
            " —Ö–æ—á–µ—à—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è –≤ —Ä–µ–∂–∏–º–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏?</b>"
        ),
        "update_confirm": (
            "‚ùì <b>–¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ"
            " —Ö–æ—á–µ—à—å –æ–±–Ω–æ–≤–∏—Ç—å—Å—è??\n\n<a"
            ' href="https://github.com/hikariatama/Hikka/commit/{}">{}</a> ‚§ë <a'
            ' href="https://github.com/hikariatama/Hikka/commit/{}">{}</a></b>'
        ),
        "no_update": "üö∏ <b>–£ —Ç–µ–±—è –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è. –û–±–Ω–æ–≤–∏—Ç—å—Å—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ?</b>",
        "cancel": "üö´ –û—Ç–º–µ–Ω–∞",
        "_cls_doc": "–û–±–Ω–æ–≤–ª—è–µ—Ç —é–∑–µ—Ä–±–æ—Ç",
        "lavhost_restart": (
            "<emoji document_id=5469986291380657759>‚úåÔ∏è</emoji> <b>–¢–≤–æ–π {}"
            " –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...</b>"
        ),
        "lavhost_update": (
            "<emoji document_id=5469986291380657759>‚úåÔ∏è</emoji> <b>–¢–≤–æ–π {}"
            " –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è...</b>"
        ),
    }

    strings_de = {
        "source": (
            "<emoji document_id=5456255401194429832>üìñ</emoji> <b>Der Quellcode kann"
            " hier</b> <a href='{}'>gelesen</a> <b>werden</b>"
        ),
        "restarting_caption": (
            "<emoji document_id=6318970114548958978>üïó</emoji> <b>Dein {}"
            " wird neugestartet...</b>"
        ),
        "downloading": (
            "<emoji document_id=6318970114548958978>üïó</emoji> <b>Updates"
            " werden heruntergeladen...</b>"
        ),
        "installing": (
            "<emoji document_id=6318970114548958978>üïó</emoji> <b>Updates"
            " werden installiert...</b>"
        ),
        "success": (
            "<emoji document_id=6321050180095313397>‚è±</emoji> <b>Neustart erfolgreich!"
            " {}</b>\n<i>Aber Module werden noch geladen...</i>\n<i>Neustart dauerte {}"
            " Sekunden</i>"
        ),
        "full_success": (
            "<emoji document_id=6323332130579416910>üëç</emoji> <b>Dein Userbot ist"
            " vollst√§ndig geladen! {}</b>\n<i>Vollst√§ndiger Neustart dauerte {}"
            " Sekunden</i>"
        ),
        "secure_boot_complete": (
            "üîí <b>Sicherer Bootvorgang abgeschlossen! {}</b>\n<i>Neustart dauerte"
            " {} Sekunden</i>"
        ),
        "origin_cfg_doc": "Link, von dem Updates heruntergeladen werden",
        "btn_restart": "üîÑ Neustart",
        "btn_update": "üß≠ Update",
        "restart_confirm": "‚ùì <b>Bist du sicher, dass du neustarten willst?</b>",
        "secure_boot_confirm": (
            "‚ùì <b>Bist du sicher, dass du in den sicheren Modus neustarten willst?</b>"
        ),
        "update_confirm": (
            "‚ùì <b>Bist du sicher, dass"
            " du updaten willst??\n\n<a"
            ' href="https://github.com/hikariatama/Hikka/commit/{}">{}</a> ‚§ë <a'
            ' href="https://github.com/hikariatama/Hikka/commit/{}">{}</a></b>'
        ),
        "no_update": (
            "üö∏ <b>Du hast die neueste Version. Willst du trotzdem updaten?</b>"
        ),
        "cancel": "üö´ Abbrechen",
        "_cls_doc": "Aktualisiert den Userbot",
        "lavhost_restart": (
            "<emoji document_id=5469986291380657759>‚úåÔ∏è</emoji> <b>Dein {}"
            " wird neugestartet...</b>"
        ),
        "lavhost_update": (
            "<emoji document_id=5469986291380657759>‚úåÔ∏è</emoji> <b>Dein {}"
            " wird aktualisiert...</b>"
        ),
    }

    strings_hi = {
        "source": (
            "<emoji document_id=5456255401194429832>üìñ</emoji> <b>‡§∏‡•ã‡§∞‡•ç‡§∏ ‡§ï‡•ã‡§° ‡§Ø‡§π‡§æ‡§Å ‡§™‡§¢‡§º‡§æ"
            " ‡§ú‡§æ ‡§∏‡§ï‡§§‡§æ ‡§π‡•à</b> <a href='{}'>‡§™‡§¢‡§º‡•á‡§Ç</a> <b>‡§π‡•à</b>"
        ),
        "restarting_caption": (
            "<emoji document_id=6318970114548958978>üïó</emoji> <b>‡§Ü‡§™‡§ï‡§æ {}"
            " ‡§´‡§ø‡§∞ ‡§∏‡•á ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•à...</b>"
        ),
        "downloading": (
            "<emoji document_id=6318970114548958978>üïó</emoji> <b>‡§Ö‡§™‡§°‡•á‡§ü"
            " ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§π‡•ã ‡§∞‡§π‡•á ‡§π‡•à‡§Ç...</b>"
        ),
        "installing": (
            "<emoji document_id=6318970114548958978>üïó</emoji> <b>‡§Ö‡§™‡§°‡•á‡§ü"
            " ‡§á‡§Ç‡§∏‡•ç‡§ü‡•â‡§≤ ‡§π‡•ã ‡§∞‡§π‡•á ‡§π‡•à‡§Ç...</b>"
        ),
        "success": (
            "<emoji document_id=6321050180095313397>‚è±</emoji> <b>‡§™‡•Å‡§®‡§É ‡§Ü‡§∞‡§Ç‡§≠"
            " ‡§∏‡§´‡§≤! {}</b>\n<i>‡§≤‡•á‡§ï‡§ø‡§® ‡§Æ‡•â‡§°‡•ç‡§Ø‡•Ç‡§≤ ‡§≠‡•Ä ‡§≤‡•ã‡§° ‡§π‡•ã ‡§∞‡§π‡•á ‡§π‡•à‡§Ç...</i>\n<i>‡§™‡•Å‡§®‡§É ‡§Ü‡§∞‡§Ç‡§≠"
            " {} ‡§∏‡•á‡§ï‡§Ç‡§° ‡§≤‡•á ‡§ó‡§Ø‡§æ</i>"
        ),
        "full_success": (
            "<emoji document_id=6323332130579416910>üëç</emoji> <b>‡§Ü‡§™‡§ï‡§æ ‡§Ø‡•Ç‡§ú‡§∞‡§¨‡•â‡§ü ‡§™‡•Ç‡§∞‡•Ä ‡§§‡§∞‡§π"
            " ‡§∏‡•á ‡§≤‡•ã‡§° ‡§π‡•ã ‡§ó‡§Ø‡§æ ‡§π‡•à! {}</b>\n<i>‡§™‡•Ç‡§∞‡§æ ‡§™‡•Å‡§®‡§É ‡§Ü‡§∞‡§Ç‡§≠ {} ‡§∏‡•á‡§ï‡§Ç‡§° ‡§≤‡•á ‡§ó‡§Ø‡§æ</i>"
        ),
        "secure_boot_complete": (
            "üîí <b>‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§¨‡•Ç‡§ü ‡§™‡•ç‡§∞‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§™‡•Ç‡§∞‡•Ä ‡§π‡•ã ‡§ó‡§à! {}</b>\n<i>‡§™‡•Å‡§®‡§É ‡§Ü‡§∞‡§Ç‡§≠ {}"
            " ‡§∏‡•á‡§ï‡§Ç‡§° ‡§≤‡•á ‡§ó‡§Ø‡§æ</i>"
        ),
        "origin_cfg_doc": "‡§∏‡•á ‡§Ö‡§™‡§°‡•á‡§ü ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§è‡§ó‡§æ",
        "btn_restart": "üîÑ ‡§™‡•Å‡§®‡§É ‡§Ü‡§∞‡§Ç‡§≠",
        "btn_update": "üß≠ ‡§Ö‡§™‡§°‡•á‡§ü",
        "restart_confirm": "‚ùì <b>‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§µ‡§æ‡§ï‡§à ‡§™‡•Å‡§®‡§É ‡§Ü‡§∞‡§Ç‡§≠ ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç?</b>",
        "secure_boot_confirm": (
            "‚ùì <b>‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§µ‡§æ‡§ï‡§à ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§Æ‡•ã‡§° ‡§Æ‡•á‡§Ç ‡§™‡•Å‡§®‡§É ‡§Ü‡§∞‡§Ç‡§≠ ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç?</b>"
        ),
        "update_confirm": (
            "‚ùì <b>‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§µ‡§æ‡§ï‡§à ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç??\n\n<a"
            ' href="https://github.com/hikariatama/Hikka/commit/{}">{}</a> ‚§ë <a'
            ' href="https://github.com/hikariatama/Hikka/commit/{}">{}</a></b>'
        ),
        "no_update": (
            "üö∏ <b>‡§Ü‡§™‡§ï‡§æ ‡§®‡§µ‡•Ä‡§®‡§§‡§Æ ‡§∏‡§Ç‡§∏‡•ç‡§ï‡§∞‡§£ ‡§π‡•à‡•§ ‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§≠‡•Ä ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç?</b>"
        ),
        "cancel": "üö´ ‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞‡•á‡§Ç",
        "_cls_doc": "‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§¨‡•â‡§ü ‡§ï‡•ã ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡§§‡§æ ‡§π‡•à",
        "lavhost_restart": (
            "<emoji document_id=5469986291380657759>‚úåÔ∏è</emoji> <b>‡§Ü‡§™‡§ï‡§æ {}"
            " ‡§™‡•Å‡§®‡§É ‡§Ü‡§∞‡§Ç‡§≠ ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à...</b>"
        ),
        "lavhost_update": (
            "<emoji document_id=5469986291380657759>‚úåÔ∏è</emoji> <b>‡§Ü‡§™‡§ï‡§æ {}"
            " ‡§Ö‡§™‡§°‡•á‡§ü ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à...</b>"
        ),
    }

    strings_tr = {
        "source": (
            "<emoji document_id=5456255401194429832>üìñ</emoji> <b>Manba kodini shu <a"
            " href='{}'>yerdan</a> o ªqing</b>"
        ),
        "restarting": (
            "<emoji document_id=6318970114548958978>üïó</emoji> <b>{}"
            " yeniden ba≈ülatƒ±lƒ±yor...</b>"
        ),
        "restarting_caption": (
            "<emoji document_id=6318970114548958978>üïó</emoji> <b>{}"
            " yeniden ba≈ülatƒ±lƒ±yor...</b>"
        ),
        "downloading": (
            "<emoji document_id=6318970114548958978>üïó</emoji> <b>G√ºncelleme"
            " indiriliyor...</b>"
        ),
        "installing": (
            "<emoji document_id=6318970114548958978>üïó</emoji> <b>G√ºncelleme"
            " y√ºkleniyor...</b>"
        ),
        "success": (
            "<emoji document_id=6321050180095313397>‚è±</emoji> <b>Yeniden ba≈ülatma"
            " ba≈üarƒ±lƒ±! {}</b>\n<i>Mod√ºller y√ºkleniyor...</i>\n<i>Yeniden ba≈ülatma {}"
            " saniye s√ºrd√º</i>"
        ),
        "full_success": (
            "<emoji document_id=6323332130579416910>üëç</emoji> <b>Botunuz tamamen"
            " y√ºklendi! {}</b>\n<i>Toplam yeniden ba≈ülatma {} saniye s√ºrd√º</i>"
        ),
        "secure_boot_complete": (
            "üîí <b>G√ºvenli mod ba≈üarƒ±yla tamamlandƒ±! {}</b>\n<i>Yeniden ba≈ülatma {}"
            " saniye s√ºrd√º</i>"
        ),
        "origin_cfg_doc": "dan g√ºncelleme indirilecek",
        "btn_restart": "üîÑ Yeniden ba≈ülat",
        "btn_update": "üß≠ G√ºncelle",
        "restart_confirm": "‚ùì <b>Ger√ßekten yeniden ba≈ülatmak istiyor musunuz?</b>",
        "secure_boot_confirm": (
            "‚ùì <b>Ger√ßekten g√ºvenli modda yeniden ba≈ülatmak istiyor musunuz?</b>"
        ),
        "update_confirm": (
            "‚ùì <b>Ger√ßekten g√ºncellemek istiyor musunuz??\n\n<a"
            ' href="https://github.com/hikariatama/Hikka/commit/{}">{}</a> ‚§ë <a'
            ' href="https://github.com/hikariatama/Hikka/commit/{}">{}</a></b>'
        ),
        "no_update": "üö∏ <b>Zaten son s√ºr√ºm√ºn√ºz. G√ºncelleme yapmak ister misiniz?</b>",
        "cancel": "üö´ ƒ∞ptal",
        "_cls_doc": "Kullanƒ±cƒ± botunu g√ºnceller",
        "lavhost_restart": (
            "<emoji document_id=6318970114548958978>‚úåÔ∏è</emoji> <b>{}"
            " yeniden ba≈ülatƒ±lƒ±yor...</b>"
        ),
        "lavhost_update": (
            "<emoji document_id=6318970114548958978>‚úåÔ∏è</emoji> <b>{}"
            " g√ºncelleniyor...</b>"
        ),
    }

    strings_uz = {
        "restarting": (
            "<emoji document_id=5469986291380657759>üïó</emoji> <b>{}"
            " qayta ishga tushirilmoqda...</b>"
        ),
        "restarting_caption": (
            "<emoji document_id=5469986291380657759>üïó</emoji> <b>{}"
            " qayta ishga tushirilmoqda...</b>"
        ),
        "downloading": (
            "<emoji document_id=5469986291380657759>üïó</emoji> <b>Yangilanish"
            " yuklanmoqda...</b>"
        ),
        "installing": (
            "<emoji document_id=5469986291380657759>üïó</emoji> <b>Yangilanish"
            " o'rnatilmoqda...</b>"
        ),
        "success": (
            "<emoji document_id=5469986291380657759>‚è±</emoji> <b>Qayta ishga tushirish"
            " muvaffaqiyatli yakunlandi! {}</b>\n<i>Modullar"
            " yuklanmoqda...</i>\n<i>Qayta ishga tushirish {} soniya davom etdi</i>"
        ),
        "full_success": (
            "<emoji document_id=5469986291380657759>üëç</emoji> <b>Sizning botingiz"
            " to'liq yuklandi! {}</b>\n<i>Jami qayta ishga tushirish {} soniya davom"
            " etdi</i>"
        ),
        "secure_boot_complete": (
            "üîí <b>Xavfsiz rejim muvaffaqiyatli yakunlandi! {}</b>\n<i>Qayta ishga"
            " tushirish {} soniya davom etdi</i>"
        ),
        "origin_cfg_doc": "dan yangilanish yuklanadi",
        "btn_restart": "üîÑ Qayta ishga tushirish",
        "btn_update": "üß≠ Yangilash",
        "restart_confirm": "‚ùì <b>Haqiqatan ham qayta ishga tushirmoqchimisiz?</b>",
        "secure_boot_confirm": (
            "‚ùì <b>Haqiqatan ham xavfsiz rejimda qayta ishga tushirmoqchimisiz?</b>"
        ),
        "update_confirm": (
            "‚ùì <b>Haqiqatan ham yangilamoqchimisiz??\n\n<a"
            ' href="https://github.com/hikariatama/Hikka/commit/{}">{}</a> ‚§ë <a'
            ' href="https://github.com/hikariatama/Hikka/commit/{}">{}</a></b>'
        ),
        "no_update": (
            "üö∏ <b>Siz allaqachon eng so'nggi versiyasiz. Yangilamoqchimisiz?</b>"
        ),
        "cancel": "üö´ Bekor qilish",
        "_cls_doc": "Foydalanuvchi botini yangilaydi",
        "lavhost_restart": (
            "<emoji document_id=5469986291380657759>‚úåÔ∏è</emoji> <b>{}"
            " qayta ishga tushirilmoqda...</b>"
        ),
        "lavhost_update": (
            "<emoji document_id=5469986291380657759>‚úåÔ∏è</emoji> <b>{}"
            " yangilanmoqda...</b>"
        ),
    }

    strings_ja = {
        "restarting": (
            "<emoji document_id=6318970114548958978>üïó</emoji> <b>{} ÂÜçËµ∑Âãï‰∏≠...</b>"
        ),
        "restarting_caption": (
            "<emoji document_id=6318970114548958978>üïó</emoji> <b>{} ÂÜçËµ∑Âãï‰∏≠...</b>"
        ),
        "downloading": (
            "<emoji document_id=6318970114548958978>üïó</emoji> <b>„Ç¢„ÉÉ„Éó„Éá„Éº„Éà„Çí„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ‰∏≠...</b>"
        ),
        "installing": (
            "<emoji document_id=6318970114548958978>üïó</emoji> <b>„Ç¢„ÉÉ„Éó„Éá„Éº„Éà„Çí„Ç§„É≥„Çπ„Éà„Éº„É´‰∏≠...</b>"
        ),
        "success": (
            "<emoji document_id=6318970114548958978>‚è±</emoji> <b>ÂÜçËµ∑Âãï„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü!"
            " {}</b>\n<i>„É¢„Ç∏„É•„Éº„É´„Çí„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ‰∏≠...</i>\n<i>ÂÜçËµ∑Âãï {} Áßí„Åã„Åã„Çä„Åæ„Åó„Åü</i>"
        ),
        "full_success": (
            "<emoji document_id=6318970114548958978>üëç</emoji> <b>„ÅÇ„Å™„Åü„ÅÆ„Éú„ÉÉ„Éà„ÅØÂÆåÂÖ®„Å´"
            "„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Åï„Çå„Åæ„Åó„Åü! {}</b>\n<i>ÂÜçËµ∑Âãï {} Áßí„Åã„Åã„Çä„Åæ„Åó„Åü</i>"
        ),
        "secure_boot_complete": "üîí <b>„Çª„Ç≠„É•„Ç¢„É¢„Éº„Éâ„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü! {}</b>\n<i>ÂÜçËµ∑Âãï {} Áßí„Åã„Åã„Çä„Åæ„Åó„Åü</i>",
        "origin_cfg_doc": "„Åã„Çâ„Ç¢„ÉÉ„Éó„Éá„Éº„Éà„Çí„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ",
        "btn_restart": "üîÑ ÂÜçËµ∑Âãï",
        "btn_update": "üß≠ „Ç¢„ÉÉ„Éó„Éá„Éº„Éà",
        "restart_confirm": "‚ùì <b>Êú¨ÂΩì„Å´ÂÜçËµ∑Âãï„Åó„Åæ„Åô„ÅãÔºü</b>",
        "secure_boot_confirm": "‚ùì <b>Êú¨ÂΩì„Å´„Çª„Ç≠„É•„Ç¢„É¢„Éº„Éâ„ÅßÂÜçËµ∑Âãï„Åó„Åæ„Åô„ÅãÔºü</b>",
        "update_confirm": (
            "‚ùì <b>Êú¨ÂΩì„Å´„Ç¢„ÉÉ„Éó„Éá„Éº„Éà„Åó„Åæ„Åô„ÅãÔºü\n\n<a"
            ' href="https://github.com/hikariatama/Hikka/commit/{}">{}</a> ‚§ë <a'
            ' href="https://github.com/hikariatama/Hikka/commit/{}">{}</a></b>'
        ),
        "no_update": "üö∏ <b>„Åô„Åß„Å´ÊúÄÊñ∞„Éê„Éº„Ç∏„Éß„É≥„Åß„Åô„ÄÇ„Ç¢„ÉÉ„Éó„Éá„Éº„Éà„Åó„Åæ„Åô„ÅãÔºü</b>",
        "cancel": "üö´ „Ç≠„É£„É≥„Çª„É´",
        "_cls_doc": "„É¶„Éº„Ç∂„Éº„Åå„Éú„ÉÉ„Éà„Çí„Ç¢„ÉÉ„Éó„Éá„Éº„Éà„Åó„Åæ„Åô",
        "lavhost_restart": (
            "<emoji document_id=6318970114548958978>‚úåÔ∏è</emoji> <b>{} ÂÜçËµ∑Âãï‰∏≠...</b>"
        ),
        "lavhost_update": (
            "<emoji document_id=6318970114548958978>‚úåÔ∏è</emoji> <b>{} „Ç¢„ÉÉ„Éó„Éá„Éº„Éà‰∏≠...</b>"
        ),
    }

    strings_kr = {
        "restarting": (
            "<emoji document_id=6318970114548958978>üïó</emoji> <b>{} Ïû¨ÏãúÏûë Ï§ë...</b>"
        ),
        "restarting_caption": (
            "<emoji document_id=6318970114548958978>üïó</emoji> <b>{} Ïû¨ÏãúÏûë Ï§ë...</b>"
        ),
        "downloading": (
            "<emoji document_id=6318970114548958978>üïó</emoji> <b>ÏóÖÎç∞Ïù¥Ìä∏ Îã§Ïö¥Î°úÎìú Ï§ë...</b>"
        ),
        "installing": (
            "<emoji document_id=6318970114548958978>üïó</emoji> <b>ÏóÖÎç∞Ïù¥Ìä∏ ÏÑ§Ïπò Ï§ë...</b>"
        ),
        "success": (
            "<emoji document_id=6318970114548958978>‚è±</emoji> <b>Ïû¨ÏãúÏûëÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!"
            " {}</b>\n<i>Î™®ÎìàÏùÑÎã§Ïö¥Î°úÎìú Ï§ë...</i>\n<i>Ïû¨ÏãúÏûë {} Ï¥à Í±∏Î†∏ÏäµÎãàÎã§</i>"
        ),
        "full_success": (
            "<emoji document_id=6318970114548958978>üëç</emoji> <b>ÎãπÏã†Ïùò Î¥áÏùÄ ÏôÑÏ†ÑÌûà"
            "Îã§Ïö¥Î°úÎìú ÎêòÏóàÏäµÎãàÎã§! {}</b>\n<i>Ïû¨ÏãúÏûë {} Ï¥à Í±∏Î†∏ÏäµÎãàÎã§</i>"
        ),
        "secure_boot_complete": "üîí <b>Î≥¥Ïïà Î™®ÎìúÍ∞Ä ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§! {}</b>\n<i>Ïû¨ÏãúÏûë {} Ï¥à Í±∏Î†∏ÏäµÎãàÎã§</i>",
        "origin_cfg_doc": "ÏóêÏÑú ÏóÖÎç∞Ïù¥Ìä∏ Îã§Ïö¥Î°úÎìú",
        "btn_restart": "üîÑ Ïû¨ÏãúÏûë",
        "btn_update": "üß≠ ÏóÖÎç∞Ïù¥Ìä∏",
        "restart_confirm": "‚ùì <b>Ïû¨ÏãúÏûë ÌïòÏãúÍ≤†ÏäµÎãàÍπå?</b>",
        "secure_boot_confirm": "‚ùì <b>Î≥¥Ïïà Î™®ÎìúÎ°ú Ïû¨ÏãúÏûë ÌïòÏãúÍ≤†ÏäµÎãàÍπå?</b>",
        "update_confirm": (
            "‚ùì <b>ÏóÖÎç∞Ïù¥Ìä∏ ÌïòÏãúÍ≤†ÏäµÎãàÍπå?\n\n<a"
            ' href="https://github.com/hikariatama/Hikka/commit/{}">{}</a> ‚§ë <a'
            ' href="https://github.com/hikariatama/Hikka/commit/{}">{}</a></b>'
        ),
        "no_update": "üö∏ <b>Ïù¥ÎØ∏ ÏµúÏã† Î≤ÑÏ†ÑÏûÖÎãàÎã§. ÏóÖÎç∞Ïù¥Ìä∏ ÌïòÏãúÍ≤†ÏäµÎãàÍπå?</b>",
        "cancel": "üö´ Ï∑®ÏÜå",
        "_cls_doc": "ÏÇ¨Ïö©ÏûêÍ∞Ä Î¥á ÏóÖÎç∞Ïù¥Ìä∏",
        "lavhost_restart": (
            "<emoji document_id=6318970114548958978>‚úåÔ∏è</emoji> <b>{} Ïû¨ÏãúÏûë Ï§ë...</b>"
        ),
        "lavhost_update": (
            "<emoji document_id=6318970114548958978>‚úåÔ∏è</emoji> <b>{} ÏóÖÎç∞Ïù¥Ìä∏ Ï§ë...</b>"
        ),
    }

    strings_ar = {
        "restarting": (
            "<emoji document_id=6318970114548958978>üïó</emoji> <b>{}"
            " ÿ•ÿπÿßÿØÿ© ÿßŸÑÿ™ÿ¥ÿ∫ŸäŸÑ...</b>"
        ),
        "restarting_caption": (
            "<emoji document_id=6318970114548958978>üïó</emoji> <b>{}"
            " ÿ•ÿπÿßÿØÿ© ÿßŸÑÿ™ÿ¥ÿ∫ŸäŸÑ...</b>"
        ),
        "downloading": (
            "<emoji document_id=6318970114548958978>üïó</emoji> <b>ÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑÿ™ÿ≠ÿØŸäÿ´...</b>"
        ),
        "installing": (
            "<emoji document_id=6318970114548958978>üïó</emoji> <b>ÿ™ÿ´ÿ®Ÿäÿ™ ÿßŸÑÿ™ÿ≠ÿØŸäÿ´...</b>"
        ),
        "success": (
            "<emoji document_id=6318970114548958978>‚è±</emoji> <b>ÿ™ŸÖ ÿ•ÿπÿßÿØÿ© ÿßŸÑÿ™ÿ¥ÿ∫ŸäŸÑ"
            " ÿ®ŸÜÿ¨ÿßÿ≠! {}</b>\n<i>ÿ¨ÿßÿ±Ÿä ÿ™ŸÜÿ≤ŸäŸÑÿßŸÑŸàÿ≠ÿØÿßÿ™...</i>\n<i>ÿ£ÿ≥ÿ™ÿ∫ÿ±ŸÇ ÿ•ÿπÿßÿØÿ© ÿßŸÑÿ™ÿ¥ÿ∫ŸäŸÑ {}"
            " ÿ´ÿßŸÜŸäÿ©</i>"
        ),
        "full_success": (
            "<emoji document_id=6318970114548958978>üëç</emoji> <b>ÿ™ŸÖ ÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑÿ®Ÿàÿ™ ÿ®ŸÜÿ¨ÿßÿ≠!"
            " {}</b>\n<i>ÿ£ÿ≥ÿ™ÿ∫ÿ±ŸÇ ÿ•ÿπÿßÿØÿ© ÿßŸÑÿ™ÿ¥ÿ∫ŸäŸÑ {} ÿ´ÿßŸÜŸäÿ©</i>"
        ),
        "secure_boot_complete": (
            "üîí <b>ÿ™ŸÖ ÿ•ŸÉŸÖÿßŸÑ Ÿàÿ∂ÿπ ÿßŸÑÿ•ŸÇŸÑÿßÿπ ÿßŸÑÿ¢ŸÖŸÜ! {}</b>\n<i>ÿ£ÿ≥ÿ™ÿ∫ÿ±ŸÇ ÿ•ÿπÿßÿØÿ© ÿßŸÑÿ™ÿ¥ÿ∫ŸäŸÑ {}"
            " ÿ´ÿßŸÜŸäÿ©</i>"
        ),
        "origin_cfg_doc": "ÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑÿ™ÿ≠ÿØŸäÿ´ ŸÖŸÜ",
        "btn_restart": "üîÑ ÿ•ÿπÿßÿØÿ© ÿßŸÑÿ™ÿ¥ÿ∫ŸäŸÑ",
        "btn_update": "üß≠ ÿ™ÿ≠ÿØŸäÿ´",
        "restart_confirm": "‚ùì <b>ŸáŸÑ ÿ™ÿ±ŸäÿØ ÿ•ÿπÿßÿØÿ© ÿßŸÑÿ™ÿ¥ÿ∫ŸäŸÑÿü</b>",
        "secure_boot_confirm": "‚ùì <b>ŸáŸÑ ÿ™ÿ±ŸäÿØ ÿ•ÿπÿßÿØÿ© ÿßŸÑÿ™ÿ¥ÿ∫ŸäŸÑ ŸÅŸä Ÿàÿ∂ÿπ ÿßŸÑÿ•ŸÇŸÑÿßÿπ ÿßŸÑÿ¢ŸÖŸÜÿü</b>",
        "update_confirm": (
            "‚ùì <b>ŸáŸÑ ÿ™ÿ±ŸäÿØ ÿ™ÿ≠ÿØŸäÿ´ÿü\n\n<a"
            ' href="https://github.com/hikariatama/Hikka/commit/{}">{}</a> ‚§ë <a'
            ' href="https://github.com/hikariatama/Hikka/commit/{}">{}</a></b>'
        ),
        "no_update": "üö∏ <b>Ÿáÿ∞ÿß ŸáŸà ÿ¢ÿÆÿ± ÿ•ÿµÿØÿßÿ±. ŸáŸÑ ÿ™ÿ±ŸäÿØ ÿ™ÿ≠ÿØŸäÿ´ÿü</b>",
        "cancel": "üö´ ÿ•ŸÑÿ∫ÿßÿ°",
        "_cls_doc": "ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ŸäÿπŸäÿØ ÿ™ÿ¥ÿ∫ŸäŸÑ ÿßŸÑÿ®Ÿàÿ™",
        "lavhost_restart": (
            "<emoji document_id=6318970114548958978>‚úåÔ∏è</emoji> <b>{}"
            " ÿ•ÿπÿßÿØÿ© ÿßŸÑÿ™ÿ¥ÿ∫ŸäŸÑ...</b>"
        ),
        "lavhost_update": (
            "<emoji document_id=6318970114548958978>‚úåÔ∏è</emoji> <b>{} ÿ™ÿ≠ÿØŸäÿ´...</b>"
        ),
    }

    strings_es = {
        "restarting": (
            "<emoji document_id=6318970114548958978>üïó</emoji> <b>{} Reiniciando...</b>"
        ),
        "restarting_caption": (
            "<emoji document_id=6318970114548958978>üïó</emoji> <b>{} Reiniciando...</b>"
        ),
        "downloading": (
            "<emoji document_id=6318970114548958978>üïó</emoji> <b>Descargando la"
            " actualizaci√≥n...</b>"
        ),
        "installing": (
            "<emoji document_id=6318970114548958978>üïó</emoji> <b>Instalando la"
            " actualizaci√≥n...</b>"
        ),
        "success": (
            "<emoji document_id=6318970114548958978>‚è±</emoji> <b>Reiniciado con √©xito!"
            " {}</b>\n<i>Descargandom√≥dulos...</i>\n<i>Reiniciado en {} segundos</i>"
        ),
        "full_success": (
            "<emoji document_id=6318970114548958978>üëç</emoji> <b>¬°Bot actualizado con"
            " √©xito! {}</b>\n<i>Reiniciado en {} segundos</i>"
        ),
        "secure_boot_complete": (
            "üîí <b>¬°Modo de arranque seguro activado! {}</b>\n<i>Reiniciado en {}"
            " segundos</i>"
        ),
        "origin_cfg_doc": "Descargar actualizaci√≥n desde",
        "btn_restart": "üîÑ Reiniciar",
        "btn_update": "üß≠ Actualizar",
        "restart_confirm": "‚ùì <b>¬øQuieres reiniciar?</b>",
        "secure_boot_confirm": (
            "‚ùì <b>¬øQuieres reiniciar en modo de arranque seguro?</b>"
        ),
        "update_confirm": (
            "‚ùì <b>¬øQuieres actualizar?\n\n<a"
            ' href="https://github.com/hikariatama/Hikka/commit/{}">{}</a> ‚§ë <a'
            ' href="https://github.com/hikariatama/Hikka/commit/{}">{}</a></b>'
        ),
        "no_update": "üö∏ <b>Esta es la √∫ltima versi√≥n. ¬øQuieres actualizar?</b>",
        "cancel": "üö´ Cancelar",
        "_cls_doc": "El usuario reinicia el bot",
        "lavhost_restart": (
            "<emoji document_id=6318970114548958978>‚úåÔ∏è</emoji> <b>{} Reiniciando...</b>"
        ),
        "lavhost_update": (
            "<emoji document_id=6318970114548958978>‚úåÔ∏è</emoji> <b>{}"
            " Actualizando...</b>"
        ),
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "GIT_ORIGIN_URL",
                "https://github.com/hikariatama/Hikka",
                lambda: self.strings("origin_cfg_doc"),
                validator=loader.validators.Link(),
            )
        )

    @loader.owner
    @loader.command(
        ru_doc="–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç —é–∑–µ—Ä–±–æ—Ç",
        de_doc="Startet den Userbot neu",
        tr_doc="Kullanƒ±cƒ± botunu yeniden ba≈ülatƒ±r",
        uz_doc="Foydalanuvchi botini qayta ishga tushiradi",
        hi_doc="‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§¨‡•â‡§ü ‡§ï‡•ã ‡§∞‡•Ä‡§∏‡•ç‡§ü‡§æ‡§∞‡•ç‡§ü ‡§ï‡§∞‡§§‡§æ ‡§π‡•à",
        ja_doc="„É¶„Éº„Ç∂„Éº„Éú„ÉÉ„Éà„ÇíÂÜçËµ∑Âãï„Åó„Åæ„Åô",
        kr_doc="ÏÇ¨Ïö©Ïûê Î¥áÏùÑ Îã§Ïãú ÏãúÏûëÌï©ÎãàÎã§",
        ar_doc="ŸäÿπŸäÿØ ÿ™ÿ¥ÿ∫ŸäŸÑ ÿßŸÑÿ®Ÿàÿ™",
        es_doc="Reinicia el bot",
    )
    async def restart(self, message: Message):
        """Restarts the userbot"""
        secure_boot = "--secure-boot" in utils.get_args_raw(message)
        try:
            if (
                "--force" in (utils.get_args_raw(message) or "")
                or "-f" in (utils.get_args_raw(message) or "")
                or not self.inline.init_complete
                or not await self.inline.form(
                    message=message,
                    text=self.strings(
                        "secure_boot_confirm" if secure_boot else "restart_confirm"
                    ),
                    reply_markup=[
                        {
                            "text": self.strings("btn_restart"),
                            "callback": self.inline_restart,
                            "args": (secure_boot,),
                        },
                        {"text": self.strings("cancel"), "action": "close"},
                    ],
                )
            ):
                raise
        except Exception:
            await self.restart_common(message, secure_boot)

    async def inline_restart(self, call: InlineCall, secure_boot: bool = False):
        await self.restart_common(call, secure_boot=secure_boot)

    async def process_restart_message(self, msg_obj: typing.Union[InlineCall, Message]):
        self.set(
            "selfupdatemsg",
            msg_obj.inline_message_id
            if hasattr(msg_obj, "inline_message_id")
            else f"{utils.get_chat_id(msg_obj)}:{msg_obj.id}",
        )

    async def restart_common(
        self,
        msg_obj: typing.Union[InlineCall, Message],
        secure_boot: bool = False,
    ):
        if (
            hasattr(msg_obj, "form")
            and isinstance(msg_obj.form, dict)
            and "uid" in msg_obj.form
            and msg_obj.form["uid"] in self.inline._units
            and "message" in self.inline._units[msg_obj.form["uid"]]
        ):
            message = self.inline._units[msg_obj.form["uid"]]["message"]
        else:
            message = msg_obj

        if secure_boot:
            self._db.set(loader.__name__, "secure_boot", True)

        msg_obj = await utils.answer(
            msg_obj,
            self.strings("restarting_caption").format(
                utils.get_platform_emoji(self._client)
                if self._client.hikka_me.premium
                and CUSTOM_EMOJIS
                and isinstance(msg_obj, Message)
                else "Hikka"
            )
            if "LAVHOST" not in os.environ
            else self.strings("lavhost_restart").format(
                '</b><emoji document_id="5192756799647785066">‚úåÔ∏è</emoji><emoji'
                ' document_id="5193117564015747203">‚úåÔ∏è</emoji><emoji'
                ' document_id="5195050806105087456">‚úåÔ∏è</emoji><emoji'
                ' document_id="5195457642587233944">‚úåÔ∏è</emoji><b>'
                if self._client.hikka_me.premium
                and CUSTOM_EMOJIS
                and isinstance(msg_obj, Message)
                else "lavHost"
            ),
        )

        await self.process_restart_message(msg_obj)

        self.set("restart_ts", time.time())

        await self._db.remote_force_save()

        if "LAVHOST" in os.environ:
            os.system("lavhost restart")
            return

        with contextlib.suppress(Exception):
            await main.hikka.web.stop()

        atexit.register(restart, *sys.argv[1:])
        handler = logging.getLogger().handlers[0]
        handler.setLevel(logging.CRITICAL)

        for client in self.allclients:
            # Terminate main loop of all running clients
            # Won't work if not all clients are ready
            if client is not message.client:
                await client.disconnect()

        await message.client.disconnect()
        sys.exit(0)

    async def download_common(self):
        try:
            repo = Repo(os.path.dirname(utils.get_base_dir()))
            origin = repo.remote("origin")
            r = origin.pull()
            new_commit = repo.head.commit
            for info in r:
                if info.old_commit:
                    for d in new_commit.diff(info.old_commit):
                        if d.b_path == "requirements.txt":
                            return True
            return False
        except git.exc.InvalidGitRepositoryError:
            repo = Repo.init(os.path.dirname(utils.get_base_dir()))
            origin = repo.create_remote("origin", self.config["GIT_ORIGIN_URL"])
            origin.fetch()
            repo.create_head("master", origin.refs.master)
            repo.heads.master.set_tracking_branch(origin.refs.master)
            repo.heads.master.checkout(True)
            return False

    @staticmethod
    def req_common():
        # Now we have downloaded new code, install requirements
        logger.debug("Installing new requirements...")
        try:
            subprocess.run(
                [
                    sys.executable,
                    "-m",
                    "pip",
                    "install",
                    "-r",
                    os.path.join(
                        os.path.dirname(utils.get_base_dir()),
                        "requirements.txt",
                    ),
                    "--user",
                ],
                check=True,
            )
        except subprocess.CalledProcessError:
            logger.exception("Req install failed")

    @loader.owner
    @loader.command(
        ru_doc="–°–∫–∞—á–∏–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —é–∑–µ—Ä–±–æ—Ç–∞",
        de_doc="L√§dt Updates f√ºr den Userbot herunter",
        tr_doc="Userbot g√ºncellemelerini indirir",
        uz_doc="Userbot yangilanishlarini yuklaydi",
        hi_doc="‡§Ø‡•Ç‡§ú‡§∞‡§¨‡•â‡§ü ‡§ï‡•á ‡§Ö‡§™‡§°‡•á‡§ü ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§ï‡§∞‡§§‡§æ ‡§π‡•à",
        ja_doc="„É¶„Éº„Ç∂„Éº„Éú„ÉÉ„Éà„ÅÆ„Ç¢„ÉÉ„Éó„Éá„Éº„Éà„Çí„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Åó„Åæ„Åô",
        kr_doc="Ïú†Ï†ÄÎ¥á ÏóÖÎç∞Ïù¥Ìä∏Î•º Îã§Ïö¥Î°úÎìúÌï©ÎãàÎã§",
        ar_doc="ŸäŸÇŸàŸÖ ÿ®ÿ™ÿ≠ŸÖŸäŸÑ ÿ™ÿ≠ÿØŸäÿ´ÿßÿ™ ÿßŸÑÿ®Ÿàÿ™",
        es_doc="Descarga las actualizaciones del bot",
    )
    async def update(self, message: Message):
        """Downloads userbot updates"""
        try:
            current = utils.get_git_hash()
            upcoming = next(
                git.Repo().iter_commits(f"origin/{version.branch}", max_count=1)
            ).hexsha
            if (
                "--force" in (utils.get_args_raw(message) or "")
                or "-f" in (utils.get_args_raw(message) or "")
                or not self.inline.init_complete
                or not await self.inline.form(
                    message=message,
                    text=self.strings("update_confirm").format(
                        current, current[:8], upcoming, upcoming[:8]
                    )
                    if upcoming != current
                    else self.strings("no_update"),
                    reply_markup=[
                        {
                            "text": self.strings("btn_update"),
                            "callback": self.inline_update,
                        },
                        {"text": self.strings("cancel"), "action": "close"},
                    ],
                )
            ):
                raise
        except Exception:
            await self.inline_update(message)

    async def inline_update(
        self,
        msg_obj: typing.Union[InlineCall, Message],
        hard: bool = False,
    ):
        # We don't really care about asyncio at this point, as we are shutting down
        if hard:
            os.system(f"cd {utils.get_base_dir()} && cd .. && git reset --hard HEAD")

        try:
            if "LAVHOST" in os.environ:
                msg_obj = await utils.answer(
                    msg_obj,
                    self.strings("lavhost_update").format(
                        "</b><emoji document_id=5192756799647785066>‚úåÔ∏è</emoji><emoji"
                        " document_id=5193117564015747203>‚úåÔ∏è</emoji><emoji"
                        " document_id=5195050806105087456>‚úåÔ∏è</emoji><emoji"
                        " document_id=5195457642587233944>‚úåÔ∏è</emoji><b>"
                        if self._client.hikka_me.premium
                        and CUSTOM_EMOJIS
                        and isinstance(msg_obj, Message)
                        else "lavHost"
                    ),
                )
                await self.process_restart_message(msg_obj)
                os.system("lavhost update")
                return

            with contextlib.suppress(Exception):
                msg_obj = await utils.answer(msg_obj, self.strings("downloading"))
            req_update = await self.download_common()

            with contextlib.suppress(Exception):
                msg_obj = await utils.answer(msg_obj, self.strings("installing"))
            if req_update:
                self.req_common()

            await self.restart_common(msg_obj)
        except GitCommandError:
            if not hard:
                await self.inline_update(msg_obj, True)
                return

            logger.critical("Got update loop. Update manually via .terminal")
            return

    @loader.unrestricted
    @loader.command(
        ru_doc="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞",
        de_doc="Zeigt den Link zum Quellcode des Projekts an",
        tr_doc="Proje kaynak kodu baƒülantƒ±sƒ±nƒ± g√∂sterir",
        uz_doc="Loyihaning manba kodiga havola ko'rsatadi",
        hi_doc="‡§™‡•ç‡§∞‡•ã‡§ú‡•á‡§ï‡•ç‡§ü ‡§ï‡•ã‡§° ‡§ï‡§æ ‡§≤‡§ø‡§Ç‡§ï ‡§¶‡§ø‡§ñ‡§æ‡§è‡§Ç",
        ja_doc="„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅÆ„ÇΩ„Éº„Çπ„Ç≥„Éº„Éâ„Å∏„ÅÆ„É™„É≥„ÇØ„ÇíË°®Á§∫„Åó„Åæ„Åô",
        kr_doc="ÌîÑÎ°úÏ†ùÌä∏ ÏÜåÏä§ ÏΩîÎìú ÎßÅÌÅ¨Î•º ÌëúÏãúÌï©ÎãàÎã§",
        ar_doc="Ÿäÿπÿ±ÿ∂ ÿ±ÿßÿ®ÿ∑ ŸÖÿµÿØÿ± ÿßŸÑÿ®Ÿàÿ™",
        es_doc="Muestra el enlace al c√≥digo fuente del proyecto",
    )
    async def source(self, message: Message):
        """Links the source code of this project"""
        await utils.answer(
            message,
            self.strings("source").format(self.config["GIT_ORIGIN_URL"]),
        )

    async def client_ready(self):
        if self.get("selfupdatemsg") is not None:
            try:
                await self.update_complete()
            except Exception:
                logger.exception("Failed to complete update!")

        if self.get("do_not_create", False):
            return

        try:
            await self._add_folder()
        except Exception:
            logger.exception("Failed to add folder!")
        finally:
            self.set("do_not_create", True)

    async def _add_folder(self):
        folders = await self._client(GetDialogFiltersRequest())

        if any(getattr(folder, "title", None) == "hikka" for folder in folders):
            return

        try:
            folder_id = (
                max(
                    folders,
                    key=lambda x: x.id,
                ).id
                + 1
            )
        except ValueError:
            folder_id = 2

        try:
            await self._client(
                UpdateDialogFilterRequest(
                    folder_id,
                    DialogFilter(
                        folder_id,
                        title="hikka",
                        pinned_peers=(
                            [
                                await self._client.get_input_entity(
                                    self._client.loader.inline.bot_id
                                )
                            ]
                            if self._client.loader.inline.init_complete
                            else []
                        ),
                        include_peers=[
                            await self._client.get_input_entity(dialog.entity)
                            async for dialog in self._client.iter_dialogs(
                                None,
                                ignore_migrated=True,
                            )
                            if dialog.name
                            in {
                                "hikka-logs",
                                "hikka-onload",
                                "hikka-assets",
                                "hikka-backups",
                                "hikka-acc-switcher",
                                "silent-tags",
                            }
                            and dialog.is_channel
                            and (
                                dialog.entity.participants_count == 1
                                or dialog.entity.participants_count == 2
                                and dialog.name in {"hikka-logs", "silent-tags"}
                            )
                            or (
                                self._client.loader.inline.init_complete
                                and dialog.entity.id
                                == self._client.loader.inline.bot_id
                            )
                            or dialog.entity.id
                            in [
                                1554874075,
                                1697279580,
                                1679998924,
                            ]  # official hikka chats
                        ],
                        emoticon="üê±",
                        exclude_peers=[],
                        contacts=False,
                        non_contacts=False,
                        groups=False,
                        broadcasts=False,
                        bots=False,
                        exclude_muted=False,
                        exclude_read=False,
                        exclude_archived=False,
                    ),
                )
            )
        except Exception:
            logger.critical(
                "Can't create Hikka folder. Possible reasons are:\n"
                "- User reached the limit of folders in Telegram\n"
                "- User got floodwait\n"
                "Ignoring error and adding folder addition to ignore list"
            )

    async def update_complete(self):
        logger.debug("Self update successful! Edit message")
        start = self.get("restart_ts")
        try:
            took = round(time.time() - start)
        except Exception:
            took = "n/a"

        msg = self.strings("success").format(utils.ascii_face(), took)
        ms = self.get("selfupdatemsg")

        if ":" in str(ms):
            chat_id, message_id = ms.split(":")
            chat_id, message_id = int(chat_id), int(message_id)
            await self._client.edit_message(chat_id, message_id, msg)
            return

        await self.inline.bot.edit_message_text(
            inline_message_id=ms,
            text=self.inline.sanitise_text(msg),
        )

    async def full_restart_complete(self, secure_boot: bool = False):
        start = self.get("restart_ts")

        try:
            took = round(time.time() - start)
        except Exception:
            took = "n/a"

        self.set("restart_ts", None)

        ms = self.get("selfupdatemsg")
        msg = self.strings(
            "secure_boot_complete" if secure_boot else "full_success"
        ).format(utils.ascii_face(), took)

        if ms is None:
            return

        self.set("selfupdatemsg", None)

        if ":" in str(ms):
            chat_id, message_id = ms.split(":")
            chat_id, message_id = int(chat_id), int(message_id)
            await self._client.edit_message(chat_id, message_id, msg)
            await asyncio.sleep(60)
            await self._client.delete_messages(chat_id, message_id)
            return

        await self.inline.bot.edit_message_text(
            inline_message_id=ms,
            text=self.inline.sanitise_text(msg),
        )


def restart(*argv):
    os.execl(
        sys.executable,
        sys.executable,
        "-m",
        os.path.relpath(utils.get_base_dir()),
        *argv,
    )

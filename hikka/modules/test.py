import inspect
import logging
import os
import random
import time
from io import BytesIO
import typing

from telethon.tl.types import Message

from .. import loader, main, utils
from ..inline.types import InlineCall

logger = logging.getLogger(__name__)

DEBUG_MODS_DIR = os.path.join(utils.get_base_dir(), "debug_modules")

if not os.path.isdir(DEBUG_MODS_DIR):
    os.mkdir(DEBUG_MODS_DIR, mode=0o755)

for mod in os.scandir(DEBUG_MODS_DIR):
    os.remove(mod.path)


@loader.tds
class TestMod(loader.Module):
    """Perform operations based on userbot self-testing"""

    _memory = {}

    strings = {
        "name": "Tester",
        "set_loglevel": "üö´ <b>Please specify verbosity as an integer or string</b>",
        "no_logs": "‚ÑπÔ∏è <b>You don't have any logs at verbosity {}.</b>",
        "logs_filename": "hikka-logs.txt",
        "logs_caption": (
            "<emoji document_id=5188377234380954537>üåò</emoji> <b>Hikka logs with"
            " verbosity </b><code>{}</code>\n\n<emoji"
            " document_id=5454390891466726015>üëã</emoji> <b>Hikka version:"
            " {}.{}.{}</b>{}\n<emoji document_id=6321050180095313397>‚è±</emoji>"
            " <b>Uptime: {}</b>\n<b>{}</b>\n\n<b>{} NoNick</b>\n<b>{} Grep</b>\n<b>{}"
            " InlineLogs</b>"
        ),
        "suspend_invalid_time": (
            "<emoji document_id=5416024721705673488>üíÄ</emoji> <b>Invalid time to"
            " suspend</b>"
        ),
        "suspended": (
            "<emoji document_id=5452023368054216810>ü•∂</emoji> <b>Bot suspended"
            " for</b> <code>{}</code> <b>seconds</b>"
        ),
        "results_ping": (
            "<emoji document_id=6321050180095313397>‚è±</emoji> <b>Telegram ping:</b>"
            " <code>{}</code> <b>ms</b>\n<emoji"
            " document_id=5377371691078916778>üòé</emoji> <b>Uptime: {}</b>"
        ),
        "ping_hint": (
            "<emoji document_id=5472146462362048818>üí°</emoji> <i>Telegram ping mostly"
            " depends on Telegram servers latency and other external factors and has"
            " nothing to do with the parameters of server on which userbot is"
            " installed</i>"
        ),
        "confidential": (
            "‚ö†Ô∏è <b>Log level </b><code>{}</code><b> may reveal your confidential info,"
            " be careful</b>"
        ),
        "confidential_text": (
            "‚ö†Ô∏è <b>Log level </b><code>{0}</code><b> may reveal your confidential info,"
            " be careful</b>\n<b>Type </b><code>.logs {0} force_insecure</code><b> to"
            " ignore this warning</b>"
        ),
        "choose_loglevel": "üíÅ‚Äç‚ôÇÔ∏è <b>Choose log level</b>",
        "bad_module": "üö´ <b>Module not found</b>",
        "debugging_enabled": (
            "üßë‚Äçüíª <b>Debugging mode enabled for module </b><code>{0}</code>\n<i>Go to"
            " directory named `debug_modules`, edit file named `{0}.py` and see changes"
            " in real time</i>"
        ),
        "debugging_disabled": "‚úÖ <b>Debugging disabled</b>",
        "send_anyway": "üì§ Send anyway",
        "cancel": "üö´ Cancel",
    }

    strings_ru = {
        "set_loglevel": "üö´ <b>–£–∫–∞–∂–∏ —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤ —á–∏—Å–ª–æ–º –∏–ª–∏ —Å—Ç—Ä–æ–∫–æ–π</b>",
        "no_logs": "‚ÑπÔ∏è <b>–£ —Ç–µ–±—è –Ω–µ—Ç –ª–æ–≥–æ–≤ —É—Ä–æ–≤–Ω—è {}.</b>",
        "logs_filename": "hikka-logs.txt",
        "logs_caption": (
            "<emoji document_id=5188377234380954537>üåò</emoji> <b>–õ–æ–≥–∏ Hikka —É—Ä–æ–≤–Ω—è"
            " </b><code>{}</code>\n\n<emoji document_id=5454390891466726015>üëã</emoji>"
            " <b>–í–µ—Ä—Å–∏—è Hikka: {}.{}.{}</b>{}\n<emoji"
            " document_id=6321050180095313397>‚è±</emoji> <b>Uptime:"
            " {}</b>\n<b>{}</b>\n\n<b>{} NoNick</b>\n<b>{} Grep</b>\n<b>{}"
            " InlineLogs</b>"
        ),
        "bad_module": "üö´ <b>–ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω</b>",
        "debugging_enabled": (
            "üßë‚Äçüíª <b>–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤–∫–ª—é—á–µ–Ω –¥–ª—è –º–æ–¥—É–ª—è"
            " </b><code>{0}</code>\n<i>–û—Ç–ø—Ä–∞–≤–ª—è–π—Å—è –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é `debug_modules`,"
            " –∏–∑–º–µ–Ω—è–π —Ñ–∞–π–ª `{0}.py`, –∏ —Å–º–æ—Ç—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏</i>"
        ),
        "debugging_disabled": "‚úÖ <b>–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω</b>",
        "suspend_invalid_time": (
            "<emoji document_id=5416024721705673488>üíÄ</emoji> <b>–ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è"
            " –∑–∞–º–æ—Ä–æ–∑–∫–∏</b>"
        ),
        "suspended": (
            "<emoji document_id=5452023368054216810>ü•∂</emoji> <b>–ë–æ—Ç –∑–∞–º–æ—Ä–æ–∂–µ–Ω –Ω–∞</b>"
            " <code>{}</code> <b>—Å–µ–∫—É–Ω–¥</b>"
        ),
        "results_ping": (
            "<emoji document_id=5370869711888194012>üëæ</emoji><b>Bampi –ø–∏–Ω–≥:</b> <code>"
            "</b> <code>{}</code> <b>ms</b>\n<emoji"
            "</b><emoji document_id=5469741319330996757>üí´</emoji><b>–ê–ø—Ç–∞–π–º:"
            " –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏: {}</b>"
        ),
        "ping_hint": (
            "<emoji document_id=5472146462362048818>üí°</emoji> <i>–°–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–∫–ª–∏–∫–∞"
            " Telegram –≤ –±–æ–ª—å—à–µ–π —Å—Ç–µ–ø–µ–Ω–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤ Telegram –∏"
            " –¥—Ä—É–≥–∏—Ö –≤–Ω–µ—à–Ω–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –∏ –Ω–∏–∫–∞–∫ –Ω–µ —Å–≤—è–∑–∞–Ω–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Å–µ—Ä–≤–µ—Ä–∞, –Ω–∞"
            " –∫–æ—Ç–æ—Ä—ã–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —é–∑–µ—Ä–±–æ—Ç</i>"
        ),
        "confidential": (
            "‚ö†Ô∏è <b>–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤ </b><code>{}</code><b> –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ª–∏—á–Ω—É—é"
            " –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –±—É–¥—å –æ—Å—Ç–æ—Ä–æ–∂–µ–Ω</b>"
        ),
        "confidential_text": (
            "‚ö†Ô∏è <b>–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤ </b><code>{0}</code><b> –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ª–∏—á–Ω—É—é"
            " –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –±—É–¥—å –æ—Å—Ç–æ—Ä–æ–∂–µ–Ω</b>\n<b>–ù–∞–ø–∏—à–∏ </b><code>.logs {0}"
            " force_insecure</code><b>, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É—è"
            " –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ</b>"
        ),
        "choose_loglevel": "üíÅ‚Äç‚ôÇÔ∏è <b>–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤</b>",
        "_cmd_doc_dump": "–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏",
        "_cmd_doc_logs": (
            "<—É—Ä–æ–≤–µ–Ω—å> - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥-—Ñ–∞–π–ª. –£—Ä–æ–≤–Ω–∏ –Ω–∏–∂–µ WARNING –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å"
            " –ª–∏—á–Ω—É—é –∏–Ω—Ñ–æ–º—Ä–∞—Ü–∏—é."
        ),
        "_cmd_doc_suspend": "<–≤—Ä–µ–º—è> - –ó–∞–º–æ—Ä–æ–∑–∏—Ç—å –±–æ—Ç–∞ –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è",
        "_cmd_doc_ping": "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–∫–ª–∏–∫–∞ —é–∑–µ—Ä–±–æ—Ç–∞",
        "_cls_doc": "–û–ø–µ—Ä–∞—Ü–∏–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Å–∞–º–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º",
        "send_anyway": "üì§ –í—Å–µ —Ä–∞–≤–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å",
        "cancel": "üö´ –û—Ç–º–µ–Ω–∞",
    }

    strings_de = {
        "set_loglevel": (
            "üö´ <b>Geben Sie die Protokollebene als Zahl oder Zeichenfolge an</b>"
        ),
        "no_logs": "‚ÑπÔ∏è <b>Du hast kein Protokollnachrichten des {} Ebene.</b>",
        "logs_filename": "hikka-logs.txt",
        "logs_caption": (
            "<emoji document_id=5188377234380954537>üåò</emoji> <b>Hikka-Level-Protokolle"
            " </b><code>{}</code>\n\n<emoji document_id=5454390891466726015>üëã</emoji>"
            " <b>Hikka-Version: {}.{}.{}</b>{}\n<Emoji"
            "document_id=6321050180095313397>‚è±</emoji> <b>Verf√ºgbarkeit:"
            " {}</b>\n<b>{}</b>\n\n<b>{} NoNick</b>\n<b>{} Grep</b>\n<b>{ }"
            "InlineLogs</b>"
        ),
        "bad_module": "üö´ <b>Modul nicht gefunden</b>",
        "debugging_enabled": (
            (
                "üßë‚Äçüíª <b>Entwicklermodus f√ºr Modul aktiviert"
                " </b><code>{0}</code>\n<i>Gehe zum Verzeichnis `debug_modules`"
            ),
            (
                "√Ñndern Sie die `{0}.py`-Datei und sehen Sie sich die √Ñnderungen in"
                " Echtzeit an</i>"
            ),
        ),
        "debugging_disabled": "‚úÖ <b>Entwicklermodus deaktiviert</b>",
        "suspend_invalid_time": (
            "<emoji document_id=5416024721705673488>üíÄ</emoji> <b>Falsche Zeit"
            "einfrieren</b>"
        ),
        "suspended": (
            "<emoji document_id=5452023368054216810>ü•∂</emoji> <b>Bot ist"
            " eingefroren</b> <code>{}</code> <b>Sekunden</b>"
        ),
        "results_ping": (
            "<emoji document_id=6321050180095313397>‚è±</emoji> <b>Reaktionszeit des"
            " Telegram:</b> <code>{}</code> <b>ms</b>\n<emoji"
            " document_id=5377371691078916778>üòé</emoji> <b>Zeit seit dem letzten"
            " Neustart: {}</b>"
        ),
        "ping_hint": (
            "<emoji document_id=5472146462362048818>üí°</emoji>"
            " <i>Reaktionsf√§higkeitTelegram ist st√§rker abh√§ngig von der Auslastung der"
            " Telegram-Server undAndere externe Faktoren und steht in keinem"
            " Zusammenhang mit den Servereinstellungen welcher Userbot installiert"
            " ist</i>"
        ),
        "confidential": (
            "‚ö†Ô∏è <b>Protokollebene </b><code>{}</code><b> kann privat enthalten"
            "Informationen, seien Sie vorsichtig</b>"
        ),
        "confidential_text": (
            "‚ö†Ô∏è <b>Protokollebene </b><code>{0}</code><b> kann privat"
            " enthaltenInformationen, seien Sie vorsichtig</b>\n<b>Schreiben Sie"
            " </b><code>.logs {0} force_insecure</code><b> um Protokolle zu"
            " ignorierenWarnung</b>"
        ),
        "choose_loglevel": "üíÅ‚Äç‚ôÇÔ∏è <b>W√§hle eine Protokollebene</b>",
        "_cmd_doc_dump": "Nachrichteninformationen anzeigen",
        "_cmd_doc_logs": (
            "<Ebene> - Sendet eine Protokolldatei. Ebenen unterhalb von WARNUNG k√∂nnen"
            " enthaltenpers√∂nliche Informationen."
        ),
        "_cmd_doc_suspend": "<Zeit> - Bot f√ºr eine Weile einfrieren",
        "_cmd_doc_ping": "√úberpr√ºft die Antwortgeschwindigkeit des Userbots",
        "_cls_doc": "Selbsttestbezogene Operationen",
        "send_anyway": "üì§ Trotzdem senden",
        "cancel": "üö´ Abbrechen",
    }

    strings_uz = {
        "set_loglevel": "üö´ <b>Log darajasini raqam yoki satr sifatida ko'rsating</b>",
        "no_logs": "‚ÑπÔ∏è <b>Siz {} darajadagi hech qanday loglaringiz yo'q.</b>",
        "logs_filename": "hikka-logs.txt",
        "logs_caption": (
            "<emoji document_id=5188377234380954537>üåò</emoji> <b>Hikka Loglari"
            " </b><code>{}</code>\n\n<emoji document_id=5454390891466726015>üëã</emoji>"
            " <b>Hikka-versiyasi: {}.{}.{}</b>{}\n<Emoji"
            "document_id=6321050180095313397>‚è±</emoji> <b>Mavjudligi:"
            " {}</b>\n<b>{}</b>\n\n<b>{} NoNick</b>\n<b>{} Grep</b>\n<b>{ }"
            "InlineLogs</b>"
        ),
        "bad_module": "üö´ <b>Modul topilmadi</b>",
        "debugging_enabled": (
            (
                "üßë‚Äçüíª <b>Modul uchun ishlab chiqarish rejimi yoqildi"
                " </b><code>{0}</code>\n<i>`debug_modules` papkasiga o'ting"
            ),
            "`{0}.py` faylini o'zgartiring va o'zgarishlarni reallaqam ko'ring</i>",
        ),
        "debugging_disabled": "‚úÖ <b>Ishtirok rejimi o'chirildi</b>",
        "suspend_invalid_time": (
            "<emoji document_id=5416024721705673488>üíÄ</emoji> <b>Noto'g'ri vaqt"
            "qo'ymoq</b>"
        ),
        "suspended": (
            "<emoji document_id=5452023368054216810>ü•∂</emoji> <b>Bot chiqarildi</b>"
            " <code>{}</code> <b>Soniyalar</b>"
        ),
        "results_ping": (
            "<emoji document_id=6321050180095313397>‚è±</emoji> <b>Telegram tezligi:</b>"
            " <code>{}</code> <b>ms</b>\n<emoji"
            " document_id=5377371691078916778>üòé</emoji> <b>So ªngi marotaba qayta ishga"
            " tushirilgan vaqti:</b> {}"
        ),
        "ping_hint": (
            "<emoji document_id=5472146462362048818>üí°</emoji> <i>Telegram"
            " tezligiTelegram serverlarining ishga tushishi va boshqa tashqi"
            " faktorlariga bog'liq va Userbot o'rnatilgan serverlarining sozlamalari"
            " bilan bog'liq emas</i>"
        ),
        "confidential": (
            "‚ö†Ô∏è <b>Log darajasi </b><code>{}</code><b> shaxsiy ma'lumotlarga ega"
            " bo'lishi mumkinO'zingizni xavfsizligi uchun</b>"
        ),
        "confidential_text": (
            "‚ö†Ô∏è <b>Log darajasi </b><code>{0}</code><b> shaxsiy ma'lumotlarga ega"
            " bo'lishi mumkinO'zingizni xavfsizligi uchun</b>\n<b>Yozing"
            " </b><code>.logs {0} force_insecure</code><b> loglarniOgohlantirish</b>"
        ),
        "choose_loglevel": "üíÅ‚Äç‚ôÇÔ∏è <b>Log darajasini tanlang</b>",
        "_cmd_doc_dump": "Xabar haqida ma'lumotlarni ko'rsatish",
        "_cmd_doc_logs": (
            "<Ebene> - Log faylini yuboradi. O'rin darajalari xavfsizlikma'lumotlar."
        ),
        "_cmd_doc_suspend": "<Vaqt> - Botni bir necha vaqtga o'chirish",
        "_cmd_doc_ping": "Userbotning javob berish tezligini tekshirish",
        "_cls_doc": "O'z testi bilan bog'liq operatsiyalar",
        "send_anyway": "üì§ Baribir yuborish",
        "cancel": "üö´ Bekor qilish",
    }

    strings_tr = {
        "set_loglevel": (
            "üö´ <b>L√ºtfen g√ºnl√ºk seviyesini sayƒ± veya dize olarak belirtin</b>"
        ),
        "no_logs": "‚ÑπÔ∏è <b>Hi√ßbir {} seviyesindeki g√ºnl√ºk bulunmuyor.</b>",
        "logs_filename": "hikka-logs.txt",
        "logs_caption": (
            "<emoji document_id=5188377234380954537>üåò</emoji> <b>Hikka G√ºnl√ºkleri"
            " </b><code>{}</code>\n\n<emoji document_id=5454390891466726015>üëã</emoji>"
            " <b>Hikka versiyasƒ±: {}.{}.{}</b>{}\n<Emoji"
            "document_id=6321050180095313397>‚è±</emoji> <b>S√ºre:"
            " {}</b>\n<b>{}</b>\n\n<b>{} NoNick</b>\n<b>{} Grep</b>\n<b>{ }"
            "InlineLogs</b>"
        ),
        "bad_module": "üö´ <b>Mod√ºl bulunamadƒ±</b>",
        "debugging_enabled": (
            (
                "üßë‚Äçüíª <b>Geli≈ütirme modu mod√ºl i√ßin etkinle≈ütirildi"
                " </b><code>{0}</code>\n<i>`debug_modules` klas√∂r√ºne gidin"
            ),
            (
                "`{0}.py` dosyasƒ±nƒ± d√ºzenleyin ve deƒüi≈üiklikleri ger√ßekle≈ütirmek i√ßin"
                " kaydedin</i>"
            ),
        ),
        "debugging_disabled": "‚úÖ <b>Geli≈ütirme modu devre dƒ±≈üƒ± bƒ±rakƒ±ldƒ±</b>",
        "suspend_invalid_time": (
            "<emoji document_id=5416024721705673488>üíÄ</emoji> <b>Ge√ßersiz zaman"
            "girdiniz</b>"
        ),
        "suspended": (
            "<emoji document_id=5452023368054216810>ü•∂</emoji> <b>Bot donduruldu</b>"
            " <code>{}</code> <b>saniye</b>"
        ),
        "results_ping": (
            "<emoji document_id=6321050180095313397>‚è±</emoji> <b>Telegramhƒ±zƒ±:</b>"
            " <code>{}</code> <b>ms</b>\n<emoji"
            " document_id=5377371691078916778>üòé</emoji> <b>Son g√ºncellemeden"
            " sonra:</b> {}"
        ),
        "ping_hint": (
            "<emoji document_id=5472146462362048818>üí°</emoji> <i>Telegram hƒ±zƒ±"
            "Telegram sunucularƒ±nƒ±n ba≈ülatƒ±lmasƒ± ve diƒüer dƒ±≈ü fakt√∂rler ile alakalƒ±dƒ±r"
            "ve Userbot kurulumunuzun sunucu ayarlarƒ±yla alakalƒ± deƒüildir</i>"
        ),
        "confidential": (
            "‚ö†Ô∏è <b>G√ºnl√ºk seviyesi </b><code>{}</code><b> gizli bilgilere sahip"
            " olabilirKendi g√ºvenliƒüiniz i√ßin</b>"
        ),
        "confidential_text": (
            "‚ö†Ô∏è <b>G√ºnl√ºk seviyesi </b><code>{0}</code><b> gizli bilgilere sahip"
            " olabilirKendi g√ºvenliƒüiniz i√ßin</b>\n<b>Yazƒ±n </b><code>.logs {0}"
            " force_insecure</code><b> g√ºnl√ºkleriuyarƒ±</b>"
        ),
        "choose_loglevel": "üíÅ‚Äç‚ôÇÔ∏è <b>L√ºtfen g√ºnl√ºk seviyesini se√ßin</b>",
        "_cmd_doc_dump": "Mesaj hakkƒ±nda bilgi g√∂ster",
        "_cmd_doc_logs": (
            "<Ebene> - G√ºnl√ºk dosyasƒ±nƒ± g√∂nderir. Seviyeler gizlibilgiler."
        ),
        "_cmd_doc_suspend": "<Zaman> - Botu bir s√ºreliƒüine dondurun",
        "_cmd_doc_ping": "Userbotun yanƒ±t verme hƒ±zƒ±nƒ± kontrol edin",
        "_cls_doc": "ƒ∞lgili testlerle ilgili i≈ülemler",
        "send_anyway": "üì§ G√∂nder",
        "cancel": "üö´ ƒ∞ptal",
    }

    strings_hi = {
        "set_loglevel": (
            "üö´ <b>‡§ï‡•É‡§™‡§Ø‡§æ ‡§≤‡•â‡§ó ‡§∏‡•ç‡§§‡§∞ ‡§ï‡•ã ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ ‡§Ø‡§æ ‡§∏‡•ç‡§ü‡•ç‡§∞‡§ø‡§Ç‡§ó ‡§ï‡•á ‡§∞‡•Ç‡§™ ‡§Æ‡•á‡§Ç ‡§®‡§ø‡§∞‡•ç‡§¶‡§ø‡§∑‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç</b>"
        ),
        "no_logs": "‚ÑπÔ∏è <b>‡§ï‡•ã‡§à {} ‡§∏‡•ç‡§§‡§∞ ‡§ï‡•á ‡§≤‡•â‡§ó ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ‡•§</b>",
        "logs_filename": "hikka-logs.txt",
        "logs_caption": (
            "<emoji document_id=5188377234380954537>üåò</emoji> <b>Hikka ‡§≤‡•â‡§ó</b>"
            " </code>\n\n<emoji document_id=5454390891466726015>üëã</emoji>"
            " <b>Hikka ‡§∏‡§Ç‡§∏‡•ç‡§ï‡§∞‡§£: {}.{}.{}</b>{}\n<Emoji"
            "document_id=6321050180095313397>‚è±</emoji> <b>‡§µ‡•á‡§≥:"
            " {}</b>\n<b>{}</b>\n\n<b>{} NoNick</b>\n<b>{} Grep</b>\n<b>{ }"
            "InlineLogs</b>"
        ),
        "bad_module": "üö´ <b>‡§Æ‡•â‡§°‡•ç‡§Ø‡•Ç‡§≤ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ</b>",
        "debugging_enabled": (
            (
                "üßë‚Äçüíª <b>‡§Æ‡•â‡§°‡•ç‡§Ø‡•Ç‡§≤ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§°‡§ø‡§¨‡§ó‡§ø‡§Ç‡§ó ‡§∏‡§ï‡•ç‡§∑‡§Æ ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à"
                " </b><code>{0}</code>\n<i>`debug_modules` ‡§´‡§º‡•ã‡§≤‡•ç‡§°‡§∞ ‡§Æ‡•á‡§Ç ‡§ú‡§æ‡§è‡§Å"
            ),
            "`{0}.py` ‡§´‡§º‡§æ‡§á‡§≤ ‡§ï‡•ã ‡§∏‡§Ç‡§™‡§æ‡§¶‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§™‡§∞‡§ø‡§µ‡§∞‡•ç‡§§‡§®‡•ã‡§Ç ‡§ï‡•ã ‡§∏‡§π‡•á‡§ú‡•á‡§Ç</i>",
        ),
        "debugging_disabled": "‚úÖ <b>‡§°‡§ø‡§¨‡§ó‡§ø‡§Ç‡§ó ‡§°‡§ø‡§∏‡•á‡§¨‡§≤ ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à</b>",
        "suspend_invalid_time": (
            "<emoji document_id=5416024721705673488>üíÄ</emoji> <b>‡§Ö‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§∏‡§Æ‡§Ø"
            "‡§¶‡§∞‡•ç‡§ú ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ‡•§</b>"
        ),
        "suspended": (
            "<emoji document_id=5452023368054216810>ü•∂</emoji> <b>‡§¨‡•â‡§ü ‡§®‡§ø‡§≤‡§Ç‡§¨‡§ø‡§§ ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ"
            " ‡§ó‡§Ø‡§æ ‡§π‡•à</b> <code>{}</code> <b>‡§∏‡•á‡§ï‡§Ç‡§°</b>"
        ),
        "results_ping": (
            "<emoji document_id=6321050180095313397>‚è±</emoji> <b>‡§ü‡•á‡§≤‡•Ä‡§ó‡•ç‡§∞‡§æ‡§Æ"
            "‡§ó‡§§‡§ø:</b> <code>{}</code> <b>‡§Æ‡§ø‡§≤‡•Ä‡§∏‡•á‡§ï‡§Ç‡§°</b>\n<emoji"
            " document_id=5377371691078916778>üòé</emoji> <b>‡§Ö‡§Ç‡§§‡§ø‡§Æ ‡§Ö‡§™‡§°‡•á‡§ü ‡§∏‡•á ‡§¨‡§æ‡§¶:</b> {}"
        ),
        "ping_hint": (
            "<emoji document_id=5472146462362048818>üí°</emoji> <i>‡§ü‡•á‡§≤‡•Ä‡§ó‡•ç‡§∞‡§æ‡§Æ ‡§ó‡§§‡§ø"
            "‡§ü‡•á‡§≤‡•Ä‡§ó‡•ç‡§∞‡§æ‡§Æ ‡§∏‡§∞‡•ç‡§µ‡§∞ ‡§ï‡•ã ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§®‡•á ‡§î‡§∞ ‡§Ö‡§®‡•ç‡§Ø ‡§¨‡§æ‡§π‡§∞‡•Ä ‡§µ‡§ú‡§π‡•ã‡§Ç ‡§∏‡•á ‡§ú‡•Å‡§°‡§º‡§æ ‡§π‡•à"
            "‡§î‡§∞ ‡§Ü‡§™‡§ï‡•á ‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§¨‡•â‡§ü ‡§∏‡•ç‡§•‡§æ‡§™‡§®‡§æ ‡§ï‡•á ‡§∏‡§∞‡•ç‡§µ‡§∞ ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏ ‡§∏‡•á ‡§∏‡§Ç‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à</i>"
        ),
        "confidential": (
            "<emoji document_id=6321050180095313397>‚è±</emoji> <b>‡§µ‡•á‡§≥:"
            " {}</b>\n<b>{}</b>\n\n<b>{} NoNick</b>\n<b>{} Grep</b>\n<b>{ }"
            "InlineLogs</b>"
        ),
        "confidential_text": (
            "‚ö†Ô∏è <b>‡§≤‡•â‡§ó ‡§∏‡•ç‡§§‡§∞ </b><code>{0}</code><b> ‡§Æ‡•á‡§Ç ‡§ó‡•ã‡§™‡§®‡•Ä‡§Ø ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§π‡•ã ‡§∏‡§ï‡§§‡•Ä ‡§π‡•à"
            "‡§Ö‡§™‡§®‡•Ä ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è</b>\n<b>‡§≤‡§ø‡§ñ‡•á‡§Ç </b><code>.logs {0}"
            "force_insecure</code><b> ‡§≤‡•â‡§ó"
            "‡§ö‡•á‡§§‡§æ‡§µ‡§®‡•Ä</b>"
        ),
        "choose_loglevel": "üíÅ‚Äç‚ôÇÔ∏è <b>‡§ï‡•É‡§™‡§Ø‡§æ ‡§≤‡•â‡§ó ‡§≤‡•á‡§µ‡§≤ ‡§ö‡•Å‡§®‡•á‡§Ç</b>",
        "_cmd_doc_dump": "‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§¶‡§ø‡§ñ‡§æ‡§è‡§Ç",
        "_cmd_doc_logs": "<Ebene> - ‡§≤‡•â‡§ó ‡§´‡§º‡§æ‡§á‡§≤ ‡§≠‡•á‡§ú‡§§‡§æ ‡§π‡•à‡•§ ‡§∏‡•ç‡§§‡§∞ ‡§õ‡§ø‡§™‡•á ‡§π‡•Å‡§è ‡§π‡•à‡§Ç‡§∏‡•Ç‡§ö‡§®‡§æ‡§è‡§Ç‡•§",
        "_cmd_doc_suspend": "<‡§∏‡§Æ‡§Ø> - ‡§¨‡•â‡§ü ‡§ï‡•ã ‡§•‡•ã‡§°‡§º‡•Ä ‡§¶‡•á‡§∞ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§´‡§º‡•ç‡§∞‡•Ä‡§ú‡§º ‡§ï‡§∞‡•á‡§Ç",
        "_cmd_doc_ping": "‡§Ø‡•Ç‡§ú‡§∞‡§¨‡•â‡§ü ‡§∞‡§ø‡§∏‡•ç‡§™‡•â‡§®‡•ç‡§∏‡§ø‡§¨‡§ø‡§≤‡§ø‡§ü‡•Ä ‡§ö‡•á‡§ï ‡§ï‡§∞‡•á‡§Ç",
        "_cls_doc": "‡§∏‡§Ç‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£ ‡§∏‡§Ç‡§∏‡§æ‡§ß‡§ø‡§§ ‡§ï‡§ø‡§è ‡§ú‡§æ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç",
        "send_anyway": "üì§ ‡§´‡§ø‡§∞ ‡§≠‡•Ä ‡§≠‡•á‡§ú‡•á‡§Ç",
        "cancel": "üö´ ‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞‡•á‡§Ç",
    }

    strings_ja = {
        "debugging_enabled": "‚úÖ <b>„Éá„Éê„ÉÉ„Ç∞„ÅåÊúâÂäπ„Å´„Å™„Çä„Åæ„Åó„Åü</b>",
        "debugging_disabled": "‚úÖ <b>„Éá„Éê„ÉÉ„Ç∞„ÅåÁÑ°Âäπ„Å´„Å™„Çä„Åæ„Åó„Åü</b>",
        "suspend_invalid_time": (
            "<emoji document_id=5416024721705673488>üíÄ</emoji> <b>ÁÑ°Âäπ„Å™ÊôÇÈñìÂÖ•Âäõ„Åï„Çå„Åæ„Åó„Åü„ÄÇ</b>"
        ),
        "suspended": (
            "<emoji document_id=5452023368054216810>ü•∂</emoji> <b>„Éú„ÉÉ„Éà„Åå"
            "‰∏ÄÊôÇÂÅúÊ≠¢„Åï„Çå„Åæ„Åó„Åü</b> <code>{}</code> <b>Áßí</b>"
        ),
        "results_ping": (
            "<emoji document_id=6321050180095313397>‚è±</emoji> <b>„ÉÜ„É¨„Ç∞„É©„É†"
            "ÈÄüÂ∫¶:</b> <code>{}</code> <b>„Éü„É™Áßí</b>\n<emoji"
            " document_id=5377371691078916778>üòé</emoji> <b>ÊúÄÂæå„ÅÆÊõ¥Êñ∞„Åã„Çâ„ÅÆÁµåÈÅéÊôÇÈñì:</b> {}"
        ),
        "ping_hint": (
            "<emoji document_id=5472146462362048818>üí°</emoji> <i>„ÉÜ„É¨„Ç∞„É©„É†ÈÄüÂ∫¶"
            "„ÉÜ„É¨„Ç∞„É©„É†„Çµ„Éº„Éê„Éº„ÇíËµ∑Âãï„Åó„ÄÅ‰ªñ„ÅÆÂ§ñÈÉ®Ë¶ÅÂõ†„Å´„Çà„Çä"
            "„ÅÇ„Å™„Åü„ÅÆ„É¶„Éº„Ç∂„Éº„Éú„ÉÉ„Éà„ÅÆ„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó„Å®„ÅØÈñ¢‰øÇ„Åå„ÅÇ„Çä„Åæ„Åõ„Çì</i>"
        ),
        "confidential": (
            "<emoji document_id=6321050180095313397>‚è±</emoji> <b>ÊôÇÈñì:"
            " {}</b>\n<b>{}</b>\n\n<b>{} NoNick</b>\n<b>{} Grep</b>\n<b>{ }"
            "InlineLogs</b>"
        ),
        "confidential_text": (
            "‚ö†Ô∏è <b>„É≠„Ç∞„É¨„Éô„É´ </b><code>{0}</code><b>„Å´„ÅØÊ©üÂØÜÊÉÖÂ†±„ÅåÂê´„Åæ„Çå„Å¶„ÅÑ„ÇãÂèØËÉΩÊÄß„Åå„ÅÇ„Çä„Åæ„Åô"
            "„Çª„Ç≠„É•„É™„ÉÜ„Ç£‰∏ä„ÅÆÁêÜÁî±„Åß</b>\n<b>Êõ∏„ÅçËæº„Åø</b><code>.logs {0}"
            "force_insecure</code><b>„É≠„Ç∞"
            "Ë≠¶Âëä</b>"
        ),
        "choose_loglevel": "üíÅ‚Äç‚ôÇÔ∏è <b>„É≠„Ç∞„É¨„Éô„É´„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ</b>",
        "_cmd_doc_dump": "„É°„ÉÉ„Çª„Éº„Ç∏„Å´Èñ¢„Åô„ÇãÊÉÖÂ†±„ÇíË°®Á§∫„Åó„Åæ„Åô",
        "_cmd_doc_logs": "<„É¨„Éô„É´> - „É≠„Ç∞„Éï„Ç°„Ç§„É´„ÇíÈÄÅ‰ø°„Åó„Åæ„Åô„ÄÇÈö†„Åï„Çå„Åü„É¨„Éô„É´„ÅØÈÄöÁü•„Åï„Çå„Åæ„Åõ„Çì„ÄÇ",
        "_cmd_doc_suspend": "<ÊôÇÈñì> - „Éú„ÉÉ„Éà„Çí‰∏ÄÊôÇÂÅúÊ≠¢„Åó„Åæ„Åô",
        "_cmd_doc_ping": "„É¶„Éº„Ç∂„Éº„Éú„ÉÉ„Éà„ÅÆ„É¨„Çπ„Éù„É≥„ÇπËÉΩÂäõ„Çí„ÉÅ„Çß„ÉÉ„ÇØ„Åó„Åæ„Åô",
        "_cls_doc": "Èñ¢ÈÄ£„Åô„Çã„ÉÜ„Çπ„Éà„ÅåÂÆüË°å„Åï„Çå„Å¶„ÅÑ„Åæ„Åô",
        "send_anyway": "üì§ „Åù„Çå„Åß„ÇÇÈÄÅ‰ø°„Åô„Çã",
        "cancel": "üö´ „Ç≠„É£„É≥„Çª„É´",
    }

    strings_kr = {
        "debugging_enabled": "‚úÖ <b>ÎîîÎ≤ÑÍπÖÏù¥ ÌôúÏÑ±ÌôîÎêòÏóàÏäµÎãàÎã§</b>",
        "debugging_disabled": "‚úÖ <b>ÎîîÎ≤ÑÍπÖÏù¥ ÎπÑÌôúÏÑ±ÌôîÎêòÏóàÏäµÎãàÎã§</b>",
        "suspend_invalid_time": (
            "<emoji document_id=5416024721705673488>üíÄ</emoji> <b>ÏûòÎ™ªÎêú ÏãúÍ∞ÑÏûÖÎ†•ÎêòÏóàÏäµÎãàÎã§</b>"
        ),
        "suspended": (
            "<emoji document_id=5452023368054216810>ü•∂</emoji> <b>Î¥áÏù¥"
            "ÏùºÏãú Ï§ëÏßÄÎêòÏóàÏäµÎãàÎã§</b> <code>{}</code> <b>Ï¥à</b>"
        ),
        "results_ping": (
            "<emoji document_id=6321050180095313397>‚è±</emoji> <b>ÌÖîÎ†àÍ∑∏Îû®"
            "ÏÜçÎèÑ:</b> <code>{}</code> <b>Î∞ÄÎ¶¨ Ï¥à</b>\n<emoji"
            " document_id=5377371691078916778>üòé</emoji> <b>ÎßàÏßÄÎßâ ÏóÖÎç∞Ïù¥Ìä∏ Ïù¥ÌõÑ Í≤ΩÍ≥º ÏãúÍ∞Ñ:</b> {}"
        ),
        "ping_hint": (
            "<emoji document_id=5472146462362048818>üí°</emoji> <i>ÌÖîÎ†àÍ∑∏Îû® ÏÜçÎèÑ"
            "ÌÖîÎ†àÍ∑∏Îû® ÏÑúÎ≤ÑÎ•º ÏãúÏûëÌïòÍ≥† Îã§Î•∏ Ïô∏Î∂Ä ÏöîÏù∏Ïóê ÏùòÌï¥"
            "ÎãπÏã†Ïùò ÏÇ¨Ïö©Ïûê Î¥áÏùò ÏÑ§Ï†ïÍ≥ºÎäî Í¥ÄÎ†®Ïù¥ ÏóÜÏäµÎãàÎã§</i>"
        ),
        "confidential": (
            "<emoji document_id=6321050180095313397>‚è±</emoji> <b>ÏãúÍ∞Ñ:"
            " {}</b>\n<b>{}</b>\n\n<b>{} NoNick</b>\n<b>{} Grep</b>\n<b>{ }"
            "InlineLogs</b>"
        ),
        "confidential_text": (
            "‚ö†Ô∏è <b>Î°úÍ∑∏ Î†àÎ≤® </b><code>{0}</code><b>ÏóêÎäî Í∏∞Î∞Ä Ï†ïÎ≥¥Í∞Ä Ìè¨Ìï®Îê† Ïàò ÏûàÏúºÎØÄÎ°ú"
            "Î≥¥ÏïàÏÉÅÏùò Ïù¥Ïú†Î°ú</b>\n<b>ÏûëÏÑ±</b><code>.logs {0}"
            "force_insecure</code><b>Î°úÍ∑∏"
            "Í≤ΩÍ≥†</b>"
        ),
        "choose_loglevel": "üíÅ‚Äç‚ôÇÔ∏è <b>Î°úÍ∑∏ Î†àÎ≤®ÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî</b>",
        "_cmd_doc_dump": "Î©îÏãúÏßÄÏóê ÎåÄÌïú Ï†ïÎ≥¥Î•º ÌëúÏãúÌï©ÎãàÎã§",
        "_cmd_doc_logs": "<Î†àÎ≤®> - Î°úÍ∑∏ ÌååÏùºÏùÑ Î≥¥ÎÉÖÎãàÎã§. Ïà®Í≤®ÏßÑ Î†àÎ≤®ÏùÄ ÏïåÎ¶ºÎêòÏßÄ ÏïäÏäµÎãàÎã§.",
        "_cmd_doc_suspend": "<ÏãúÍ∞Ñ> - Î¥áÏùÑ ÏùºÏãú Ï§ëÏßÄÌï©ÎãàÎã§",
        "_cmd_doc_ping": "ÏÇ¨Ïö©Ïûê Î¥áÏùò ÏùëÎãµ Îä•Î†•ÏùÑ ÌôïÏù∏Ìï©ÎãàÎã§",
        "_cls_doc": "Í¥ÄÎ†®Îêú ÌÖåÏä§Ìä∏Í∞Ä Ïã§Ìñâ Ï§ëÏûÖÎãàÎã§",
        "send_anyway": "üì§ Í∑∏ÎûòÎèÑ Î≥¥ÎÇ¥Í∏∞",
        "cancel": "üö´ Ï∑®ÏÜå",
    }

    strings_ar = {
        "debugging_enabled": "‚úÖ <b>ÿ™ŸÖ ÿ™ŸÖŸÉŸäŸÜ ÿßŸÑÿ™ÿµÿ≠Ÿäÿ≠</b>",
        "debugging_disabled": "‚úÖ <b>ÿ™ŸÖ ÿ™ÿπÿ∑ŸäŸÑ ÿßŸÑÿ™ÿµÿ≠Ÿäÿ≠</b>",
        "suspend_invalid_time": (
            "<emoji document_id=5416024721705673488>üíÄ</emoji> <b>ÿ£ÿØÿÆŸÑÿßŸÑŸàŸÇÿ™ ÿßŸÑÿµÿ≠Ÿäÿ≠</b>"
        ),
        "suspended": (
            "<emoji document_id=5452023368054216810>ü•∂</emoji> <b>ÿ™ŸÖ ÿ•ŸäŸÇÿßŸÅ"
            "ÿßŸÑÿ®Ÿàÿ™</b> <code>{}</code> <b>ÿ´ŸàÿßŸÜŸç</b>"
        ),
        "results_ping": (
            "<emoji document_id=6321050180095313397>‚è±</emoji> <b>ÿ≥ÿ±ÿπÿ©ÿ™ŸäŸÑŸäÿ¨ÿ±ÿßŸÖ:</b>"
            " <code>{}</code> <b>ŸÖŸÑŸÑŸä ÿ´ÿßŸÜŸäÿ©</b>\n<emoji"
            " document_id=5377371691078916778>üòé</emoji> <b>ŸÖÿØÿ© ÿßŸÑŸàŸÇÿ™ ŸÖŸÜÿ∞ ÿ¢ÿÆÿ±"
            " ÿ™ÿ≠ÿØŸäÿ´:</b> {}"
        ),
        "ping_hint": (
            "<emoji document_id=5472146462362048818>üí°</emoji> <i>ÿ≥ÿ±ÿπÿ©"
            "ÿ™ŸäŸÑŸäÿ¨ÿ±ÿßŸÖ ŸÑŸäÿ≥ÿ™ ÿπÿ®ÿßÿ±ÿ© ÿπŸÜ ÿßŸÑŸàŸÇÿ™ ÿßŸÑÿ∞Ÿä Ÿäÿ≥ÿ™ÿ∫ÿ±ŸÇŸá ÿßŸÑÿ®Ÿàÿ™ ŸÑŸÑÿ±ÿØ ÿπŸÑŸâ ÿßŸÑÿ±ÿ≥ÿßÿ¶ŸÑ"
            "ŸÑŸÉŸÜŸáÿß ŸáŸä ÿßŸÑŸàŸÇÿ™ ÿßŸÑÿ∞Ÿä Ÿäÿ≥ÿ™ÿ∫ÿ±ŸÇŸá ÿßŸÑÿ®Ÿàÿ™ ŸÑŸÑÿ±ÿØ ÿπŸÑŸâ ÿßŸÑÿ±ÿ≥ÿßÿ¶ŸÑ ÿßŸÑÿÆÿßÿµÿ© ÿ®ŸÉ ŸÖŸÜ"
            "ÿ®ÿØÿ° ÿ™ÿ¥ÿ∫ŸäŸÑ ÿßŸÑÿ®Ÿàÿ™ ŸàŸÑŸäÿ≥ ÿ®ÿ≥ÿ®ÿ® ÿ£Ÿä ÿπŸàÿßŸÖŸÑ ÿÆÿßÿ±ÿ¨Ÿäÿ© ÿ£ÿÆÿ±Ÿâ"
            "ŸÖÿ´ŸÑ ÿ•ÿπÿØÿßÿØÿßÿ™ ÿßŸÑÿ®Ÿàÿ™ ÿßŸÑÿÆÿßÿµ ÿ®ŸÉ</i>"
        ),
        "confidential": (
            "<emoji document_id=6321050180095313397>‚è±</emoji> <b>ÿßŸÑŸàŸÇÿ™:"
            " {}</b>\n<b>{}</b>\n\n<b>{} NoNick</b>\n<b>{} Grep</b>\n<b>{ }"
            "InlineLogs</b>"
        ),
        "confidential_text": (
            "‚ö†Ô∏è <b>Ÿäÿ≠ÿ™ŸàŸä ŸÖÿ≥ÿ™ŸàŸâ ÿßŸÑÿ≥ÿ¨ŸÑÿßÿ™ </b><code>{0}</code><b>ÿπŸÑŸâ ŸÖÿπŸÑŸàŸÖÿßÿ™"
            "ÿ≥ÿ±Ÿäÿ© ŸàŸÑÿ∞ŸÑŸÉ</b>\n<b>ÿßŸÉÿ™ÿ®</b><code>.logs {0}"
            "force_insecure</code><b>ŸÑÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑÿ≥ÿ¨ŸÑÿßÿ™"
            "ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿ≥ÿ±Ÿäÿ©</b>"
        ),
        "choose_loglevel": "üíÅ‚Äç‚ôÇÔ∏è <b>ÿßÿÆÿ™ÿ± ŸÖÿ≥ÿ™ŸàŸâ ÿßŸÑÿ≥ÿ¨ŸÑÿßÿ™</b>",
        "_cmd_doc_dump": "ÿπÿ±ÿ∂ ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿßŸÑÿ±ÿ≥ÿßŸÑÿ©",
        "_cmd_doc_logs": (
            "<ŸÖÿ≥ÿ™ŸàŸâ> - ÿ•ÿ±ÿ≥ÿßŸÑ ŸÖŸÑŸÅÿßÿ™ ÿßŸÑÿ≥ÿ¨ŸÑÿßÿ™. ÿßŸÑŸÖÿ≥ÿ™ŸàŸäÿßÿ™ ÿßŸÑŸÖÿÆŸÅŸäÿ© ŸÑÿß Ÿäÿ™ŸÖ ÿ•ÿÆÿ∑ÿßÿ±ŸÉ ÿπŸÜŸáÿß."
        ),
        "_cmd_doc_suspend": "<ŸàŸÇÿ™> - ÿ•ŸäŸÇÿßŸÅ ÿßŸÑÿ®Ÿàÿ™ ŸÖÿ§ŸÇÿ™Ÿãÿß",
        "_cmd_doc_ping": "ÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿ≥ÿ±ÿπÿ© ÿßŸÑÿ®Ÿàÿ™",
        "_cls_doc": "ÿ™ŸÖ ÿ™ÿ¥ÿ∫ŸäŸÑ ÿßÿÆÿ™ÿ®ÿßÿ±ÿßÿ™ ÿ∞ÿßÿ™ ÿµŸÑÿ©",
        "send_anyway": "üì§ ÿ•ÿ±ÿ≥ÿßŸÑŸáÿß ÿπŸÑŸâ ÿ£Ÿäÿ© ÿ≠ÿßŸÑ",
        "cancel": "üö´ ÿ•ŸÑÿ∫ÿßÿ°",
    }

    strings_es = {
        "debugging_enabled": "‚úÖ <b>Depuraci√≥n habilitada</b>",
        "debugging_disabled": "‚úÖ <b>Depuraci√≥n deshabilitada</b>",
        "suspend_invalid_time": (
            "<emoji document_id=5416024721705673488>üíÄ</emoji> <b>Ingrese"
            "el tiempo correcto</b>"
        ),
        "suspended": (
            "<emoji document_id=5452023368054216810>ü•∂</emoji> <b>Bot"
            "suspendido</b> <code>{}</code> <b>segundos</b>"
        ),
        "results_ping": (
            "<emoji document_id=6321050180095313397>‚è±</emoji> <b>Velocidad"
            "de Telegram:</b> <code>{}</code> <b>milisegundos</b>\n<emoji"
            " document_id=5377371691078916778>üòé</emoji> <b>Desde el √∫ltimo"
            "actualizaci√≥n:</b> {}"
        ),
        "ping_hint": (
            "<emoji document_id=5472146462362048818>üí°</emoji> <i>La velocidad"
            "de Telegram no es el tiempo que toma en responder el bot a los mensajes"
            "pero es el tiempo que toma en responder a tus mensajes desde que"
            "el bot se inici√≥ y no por cualquier otra raz√≥n externa"
            "como la configuraci√≥n de tu bot</i>"
        ),
        "confidential": (
            "<emoji document_id=6321050180095313397>‚è±</emoji> <b>Tiempo:"
            " {}</b>\n<b>{}</b>\n\n<b>{} NoNick</b>\n<b>{} Grep</b>\n<b>{ }"
            "InlineLogs</b>"
        ),
        "confidential_text": (
            "‚ö†Ô∏è <b>El nivel de registro </b><code>{0}</code><b>contiene"
            "informaci√≥n confidencial y por lo tanto</b>\n<b>escribe</b><code>.logs {0}"
            "force_insecure</code><b>para enviar los registros"
            "informaci√≥n confidencial</b>"
        ),
        "choose_loglevel": "üíÅ‚Äç‚ôÇÔ∏è <b>Elige el nivel de registro</b>",
        "_cmd_doc_dump": "Mostrar informaci√≥n del mensaje",
        "_cmd_doc_logs": (
            "<nivel> - Env√≠a archivos de registro. Los niveles ocultos no se"
            " notificar√°n."
        ),
        "_cmd_doc_suspend": "<tiempo> - Suspende el bot temporalmente",
        "_cmd_doc_ping": "Verifique la velocidad del bot",
        "_cls_doc": "Se ejecutaron pruebas relacionadas",
        "send_anyway": "üì§ Enviar de todos modos",
        "cancel": "üö´ Cancelar",
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "force_send_all",
                False,
                "‚ö†Ô∏è Do not touch, if you don't know what it does!\nBy default, Hikka"
                " will try to determine, which client caused logs. E.g. there is a"
                " module TestModule installed on Client1 and TestModule2 on Client2. By"
                " default, Client2 will get logs from TestModule2, and Client1 will get"
                " logs from TestModule. If this option is enabled, Hikka will send all"
                " logs to Client1 and Client2, even if it is not the one that caused"
                " the log.",
                validator=loader.validators.Boolean(),
                on_change=self._pass_config_to_logger,
            ),
            loader.ConfigValue(
                "tglog_level",
                "INFO",
                "‚ö†Ô∏è Do not touch, if you don't know what it does!\n"
                "Minimal loglevel for records to be sent in Telegram.",
                validator=loader.validators.Choice(
                    ["INFO", "WARNING", "ERROR", "CRITICAL"]
                ),
                on_change=self._pass_config_to_logger,
            ),
        )

    def _pass_config_to_logger(self):
        logging.getLogger().handlers[0].force_send_all = self.config["force_send_all"]
        logging.getLogger().handlers[0].tg_level = {
            "INFO": 20,
            "WARNING": 30,
            "ERROR": 40,
            "CRITICAL": 50,
        }[self.config["tglog_level"]]

    @loader.command(
        ru_doc="–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –µ–≥–æ –¥–∞–º–ø",
        de_doc="Antworten Sie auf eine Nachricht, um ihren Dump anzuzeigen",
        tr_doc="D√∂k√ºm√ºn√º g√∂stermek i√ßin bir iletiyi yanƒ±tlayƒ±n",
        hi_doc="‡§ï‡§ø‡§∏‡•Ä ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§ï‡§æ ‡§â‡§§‡•ç‡§§‡§∞ ‡§â‡§∏‡§ï‡•á ‡§°‡§Ç‡§™ ‡§ï‡•ã ‡§¶‡§ø‡§ñ‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§¶‡•á‡§Ç",
        uz_doc="Xabarning axlatini ko'rsatish uchun unga javob bering",
        ja_doc="„É°„ÉÉ„Çª„Éº„Ç∏„Å´Ëøî‰ø°„Åó„Å¶„Åù„ÅÆ„ÉÄ„É≥„Éó„ÇíË°®Á§∫„Åó„Åæ„Åô",
        kr_doc="Î©îÏãúÏßÄÏóê ÎãµÏû•ÌïòÏó¨ Í∑∏ Îç§ÌîÑÎ•º ÌëúÏãúÌï©ÎãàÎã§",
        ar_doc="ÿ£ÿ±ÿ≥ŸÑ ÿ±ÿ≥ÿßŸÑÿ© ŸÑÿπÿ±ÿ∂ ŸÜÿ≥ÿÆÿ© ŸÖŸÜŸáÿß",
        es_doc="Responde a un mensaje para mostrar su volcado",
    )
    async def dump(self, message: Message):
        """Use in reply to get a dump of a message"""
        if not message.is_reply:
            return

        await utils.answer(
            message,
            "<code>"
            + utils.escape_html((await message.get_reply_message()).stringify())
            + "</code>",
        )

    @loader.loop(interval=1)
    async def watchdog(self):
        if not os.path.isdir(DEBUG_MODS_DIR):
            return

        try:
            for module in os.scandir(DEBUG_MODS_DIR):
                last_modified = os.stat(module.path).st_mtime
                cls_ = module.path.split("/")[-1].split(".py")[0]

                if cls_ not in self._memory:
                    self._memory[cls_] = last_modified
                    continue

                if self._memory[cls_] == last_modified:
                    continue

                self._memory[cls_] = last_modified
                logger.debug("Reloading debug module %s", cls_)
                with open(module.path, "r") as f:
                    try:
                        await next(
                            module
                            for module in self.allmodules.modules
                            if module.__class__.__name__ == "LoaderMod"
                        ).load_module(
                            f.read(),
                            None,
                            save_fs=False,
                        )
                    except Exception:
                        logger.exception("Failed to reload module in watchdog")
        except Exception:
            logger.exception("Failed debugging watchdog")
            return

    @loader.command(
        ru_doc=(
            "[–º–æ–¥—É–ª—å] - –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: –æ—Ç–∫—Ä—ã—Ç—å –º–æ–¥—É–ª—å –≤ —Ä–µ–∂–∏–º–µ –¥–µ–±–∞–≥–∞ –∏ –ø—Ä–∏–º–µ–Ω—è—Ç—å"
            " –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑ –Ω–µ–≥–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"
        ),
        de_doc=(
            "[Modul] - F√ºr Entwickler: √ñffnet ein Modul im Debug-Modus und"
            " wendet √Ñnderungen aus ihm in Echtzeit an"
        ),
        uz_doc=(
            "[modul] - Dasturchaklar uchun: modulni debug rejimida ochib, va uni"
            " real vaqtda ishga tushirish"
        ),
        tr_doc=(
            "[modul] - Geli≈ütiriciler i√ßin: Bir mod√ºl√º debug modunda a√ßar ve"
            " deƒüi≈üiklikleri ger√ßek zamanlƒ± uygular"
        ),
        hi_doc=(
            "[‡§Æ‡•â‡§°‡•ç‡§Ø‡•Ç‡§≤] - ‡§°‡•á‡§µ‡§≤‡§™‡§∞‡•ç‡§∏ ‡§ï‡•á ‡§≤‡§ø‡§è: ‡§è‡§ï ‡§Æ‡•â‡§°‡•ç‡§Ø‡•Ç‡§≤ ‡§ï‡•ã ‡§°‡§ø‡§¨‡§ó ‡§Æ‡•ã‡§° ‡§Æ‡•á‡§Ç ‡§ñ‡•ã‡§≤‡•á‡§Ç ‡§î‡§∞"
            " ‡§µ‡§æ‡§∏‡•ç‡§§‡§µ‡§ø‡§ï ‡§∏‡§Æ‡§Ø ‡§Æ‡•á‡§Ç ‡§á‡§∏‡§ï‡•á ‡§™‡§∞‡§ø‡§µ‡§∞‡•ç‡§§‡§®‡•ã‡§Ç ‡§ï‡•ã ‡§≤‡§æ‡§ó‡•Ç ‡§ï‡§∞‡•á‡§Ç"
        ),
        ja_doc="[„É¢„Ç∏„É•„Éº„É´] - ÈñãÁô∫ËÄÖÂêë„ÅëÔºö„É¢„Ç∏„É•„Éº„É´„Çí„Éá„Éê„ÉÉ„Ç∞„É¢„Éº„Éâ„ÅßÈñã„Åç„ÄÅÂ§âÊõ¥„Çí„É™„Ç¢„É´„Çø„Ç§„É†„ÅßÈÅ©Áî®„Åó„Åæ„Åô",
        kr_doc="[Î™®Îìà] - Í∞úÎ∞úÏûêÏö©: Î™®ÎìàÏùÑ ÎîîÎ≤ÑÍ∑∏ Î™®ÎìúÎ°ú Ïó¥Í≥† Ïã§ÏãúÍ∞ÑÏúºÎ°ú Î≥ÄÍ≤ΩÏùÑ Ï†ÅÏö©Ìï©ÎãàÎã§",
        ar_doc=(
            "[Ÿàÿ≠ÿØÿ©] - ŸÑŸÑŸÖÿ∑Ÿàÿ±ŸäŸÜ: ŸÅÿ™ÿ≠ Ÿàÿ≠ÿØÿ© ŸÅŸä Ÿàÿ∂ÿπ ÿ™ÿµÿ≠Ÿäÿ≠ ÿßŸÑÿ£ÿÆÿ∑ÿßÿ° Ÿàÿ™ÿ∑ÿ®ŸäŸÇ"
            " ÿßŸÑÿ™ÿ∫ŸäŸäÿ±ÿßÿ™ ŸÖŸÜŸá ŸÅŸä ÿßŸÑŸàŸÇÿ™ ÿßŸÑÿ≠ŸÇŸäŸÇŸä"
        ),
        es_doc=(
            "[m√≥dulo] - Para desarrolladores: abre un m√≥dulo en modo de depuraci√≥n y"
            " aplica los cambios de √©l en tiempo real"
        ),
    )
    async def debugmod(self, message: Message):
        """[module] - For developers: Open module for debugging
        You will be able to track changes in real-time"""
        args = utils.get_args_raw(message)
        instance = None
        for module in self.allmodules.modules:
            if (
                module.__class__.__name__.lower() == args.lower()
                or module.strings["name"].lower() == args.lower()
            ):
                if os.path.isfile(
                    os.path.join(
                        DEBUG_MODS_DIR,
                        f"{module.__class__.__name__}.py",
                    )
                ):
                    os.remove(
                        os.path.join(
                            DEBUG_MODS_DIR,
                            f"{module.__class__.__name__}.py",
                        )
                    )

                    try:
                        delattr(module, "hikka_debug")
                    except AttributeError:
                        pass

                    await utils.answer(message, self.strings("debugging_disabled"))
                    return

                module.hikka_debug = True
                instance = module
                break

        if not instance:
            await utils.answer(message, self.strings("bad_module"))
            return

        with open(
            os.path.join(
                DEBUG_MODS_DIR,
                f"{instance.__class__.__name__}.py",
            ),
            "wb",
        ) as f:
            f.write(inspect.getmodule(instance).__loader__.data)

        await utils.answer(
            message,
            self.strings("debugging_enabled").format(instance.__class__.__name__),
        )

    @loader.command(
        ru_doc="<—É—Ä–æ–≤–µ–Ω—å> - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏",
        de_doc="<Level> - Zeige Logs",
        uz_doc="<daraja> - Loglarni ko'rsatish",
        tr_doc="<seviye> - G√ºnl√ºkleri g√∂ster",
        hi_doc="<‡§∏‡•ç‡§§‡§∞> - ‡§≤‡•â‡§ó ‡§¶‡§ø‡§ñ‡§æ‡§è‡§Ç",
        ja_doc="<„É¨„Éô„É´> - „É≠„Ç∞„ÇíË°®Á§∫„Åó„Åæ„Åô",
        kr_doc="<Î†àÎ≤®> - Î°úÍ∑∏ ÌëúÏãú",
        ar_doc="<ŸÖÿ≥ÿ™ŸàŸâ> - ÿ•ÿ∏Ÿáÿßÿ± ÿßŸÑÿ≥ÿ¨ŸÑÿßÿ™",
        es_doc="<nivel> - Mostrar registros",
    )
    async def logs(
        self,
        message: typing.Union[Message, InlineCall],
        force: bool = False,
        lvl: typing.Union[int, None] = None,
    ):
        """<level> - Dump logs"""
        if not isinstance(lvl, int):
            args = utils.get_args_raw(message)
            try:
                try:
                    lvl = int(args.split()[0])
                except ValueError:
                    lvl = getattr(logging, args.split()[0].upper(), None)
            except IndexError:
                lvl = None

        if not isinstance(lvl, int):
            try:
                if not self.inline.init_complete or not await self.inline.form(
                    text=self.strings("choose_loglevel"),
                    reply_markup=[
                        [
                            {
                                "text": "üö® Critical",
                                "callback": self.logs,
                                "args": (False, 50),
                            },
                            {
                                "text": "üö´ Error",
                                "callback": self.logs,
                                "args": (False, 40),
                            },
                        ],
                        [
                            {
                                "text": "‚ö†Ô∏è Warning",
                                "callback": self.logs,
                                "args": (False, 30),
                            },
                            {
                                "text": "‚ÑπÔ∏è Info",
                                "callback": self.logs,
                                "args": (False, 20),
                            },
                        ],
                        [
                            {
                                "text": "üßë‚Äçüíª Debug",
                                "callback": self.logs,
                                "args": (False, 10),
                            },
                            {
                                "text": "üëÅ All",
                                "callback": self.logs,
                                "args": (False, 0),
                            },
                        ],
                        [{"text": "üö´ Cancel", "action": "close"}],
                    ],
                    message=message,
                ):
                    raise
            except Exception:
                await utils.answer(message, self.strings("set_loglevel"))

            return

        logs = "\n\n".join(
            [
                "\n".join(
                    handler.dumps(lvl, client_id=self._client.tg_id)
                    if "client_id" in inspect.signature(handler.dumps).parameters
                    else handler.dumps(lvl)
                )
                for handler in logging.getLogger().handlers
            ]
        )

        named_lvl = (
            lvl
            if lvl not in logging._levelToName
            else logging._levelToName[lvl]  # skipcq: PYL-W0212
        )

        if (
            lvl < logging.WARNING
            and not force
            and (
                not isinstance(message, Message)
                or "force_insecure" not in message.raw_text.lower()
            )
        ):
            try:
                if not self.inline.init_complete:
                    raise

                cfg = {
                    "text": self.strings("confidential").format(named_lvl),
                    "reply_markup": [
                        {
                            "text": self.strings("send_anyway"),
                            "callback": self.logs,
                            "args": [True, lvl],
                        },
                        {"text": self.strings("cancel"), "action": "close"},
                    ],
                }
                if isinstance(message, Message):
                    if not await self.inline.form(**cfg, message=message):
                        raise
                else:
                    await message.edit(**cfg)
            except Exception:
                await utils.answer(
                    message,
                    self.strings("confidential_text").format(named_lvl),
                )

            return

        if len(logs) <= 2:
            if isinstance(message, Message):
                await utils.answer(message, self.strings("no_logs").format(named_lvl))
            else:
                await message.edit(self.strings("no_logs").format(named_lvl))
                await message.unload()

            return

        if btoken := self._db.get("hikka.inline", "bot_token", False):
            logs = logs.replace(
                btoken,
                f'{btoken.split(":")[0]}:***************************',
            )

        if hikka_token := self._db.get("HikkaDL", "token", False):
            logs = logs.replace(
                hikka_token,
                f'{hikka_token.split("_")[0]}_********************************',
            )

        if hikka_token := self._db.get("Kirito", "token", False):
            logs = logs.replace(
                hikka_token,
                f'{hikka_token.split("_")[0]}_********************************',
            )

        if os.environ.get("DATABASE_URL"):
            logs = logs.replace(
                os.environ.get("DATABASE_URL"),
                "postgre://**************************",
            )

        if os.environ.get("REDIS_URL"):
            logs = logs.replace(
                os.environ.get("REDIS_URL"),
                "postgre://**************************",
            )

        if os.environ.get("hikka_session"):
            logs = logs.replace(
                os.environ.get("hikka_session"),
                "StringSession(**************************)",
            )

        logs = BytesIO(logs.encode("utf-16"))
        logs.name = self.strings("logs_filename")

        ghash = utils.get_git_hash()

        other = (
            *main.__version__,
            " <i><a"
            f' href="https://github.com/hikariatama/Hikka/commit/{ghash}">({ghash[:8]})</a></i>'
            if ghash
            else "",
            utils.formatted_uptime(),
            utils.get_named_platform(),
            "‚úÖ" if self._db.get(main.__name__, "no_nickname", False) else "üö´",
            "‚úÖ" if self._db.get(main.__name__, "grep", False) else "üö´",
            "‚úÖ" if self._db.get(main.__name__, "inlinelogs", False) else "üö´",
        )

        if getattr(message, "out", True):
            await message.delete()

        if isinstance(message, Message):
            await utils.answer(
                message,
                logs,
                caption=self.strings("logs_caption").format(named_lvl, *other),
            )
        else:
            await self._client.send_file(
                message.form["chat"],
                logs,
                caption=self.strings("logs_caption").format(named_lvl, *other),
            )

    @loader.owner
    @loader.command(
        ru_doc="<–≤—Ä–µ–º—è> - –ó–∞–º–æ—Ä–æ–∑–∏—Ç—å –±–æ—Ç–∞ –Ω–∞ N —Å–µ–∫—É–Ω–¥",
        de_doc="<Zeit> - Stoppe den Bot f√ºr N Sekunden",
        tr_doc="<s√ºre> - Botu N saniye boyunca durdur",
        uz_doc="<vaqt> - Botni N soniya davomida to'xtatish",
        hi_doc="<‡§∏‡§Æ‡§Ø> - ‡§¨‡•â‡§ü ‡§ï‡•ã N ‡§∏‡•á‡§ï‡§Ç‡§° ‡§§‡§ï ‡§†‡§π‡§∞‡§æ‡§è‡§Ç",
        ja_doc="<ÊôÇÈñì> - „Éú„ÉÉ„Éà„ÇíNÁßíÈñìÂÅúÊ≠¢„Åó„Åæ„Åô",
        kr_doc="<ÏãúÍ∞Ñ> - Î¥áÏùÑ N Ï¥à ÎèôÏïà Ï†ïÏßÄ",
        ar_doc="<ÿßŸÑŸàŸÇÿ™> - ÿ™ÿ¨ŸÖŸäÿØ ÿßŸÑÿ®Ÿàÿ™ ŸÑŸÖÿØÿ© N ÿ´ÿßŸÜŸäÿ©",
        es_doc="<tiempo> - Congela el bot durante N segundos",
    )
    async def suspend(self, message: Message):
        """<time> - Suspends the bot for N seconds"""
        try:
            time_sleep = float(utils.get_args_raw(message))
            await utils.answer(
                message,
                self.strings("suspended").format(time_sleep),
            )
            time.sleep(time_sleep)
        except ValueError:
            await utils.answer(message, self.strings("suspend_invalid_time"))

    @loader.command(
        ru_doc="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–∫–ª–∏–∫–∞ —é–∑–µ—Ä–±–æ—Ç–∞",
        de_doc="√úberpr√ºfe die Antwortgeschwindigkeit des Userbots",
        tr_doc="Kullanƒ±cƒ± botunun yanƒ±t hƒ±zƒ±nƒ± kontrol edin",
        uz_doc="Foydalanuvchi botining javob tezligini tekshiring",
        hi_doc="‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§¨‡•â‡§ü ‡§ï‡•Ä ‡§™‡•ç‡§∞‡§§‡§ø‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§ó‡§§‡§ø ‡§ï‡•Ä ‡§ú‡§æ‡§Ç‡§ö ‡§ï‡§∞‡•á‡§Ç",
        ja_doc="„É¶„Éº„Ç∂„Éº„Éú„ÉÉ„Éà„ÅÆÂøúÁ≠îÈÄüÂ∫¶„ÇíÁ¢∫Ë™ç„Åó„Åæ„Åô",
        kr_doc="ÏÇ¨Ïö©Ïûê Î¥áÏùò ÏùëÎãµ ÏÜçÎèÑÎ•º ÌôïÏù∏ÌïòÏã≠ÏãúÏò§",
        ar_doc="ÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿ≥ÿ±ÿπÿ© ÿßÿ≥ÿ™ÿ¨ÿßÿ®ÿ© ÿ®Ÿàÿ™ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ",
        es_doc="Comprueba la velocidad de respuesta del bot de usuario",
    )
    async def ping(self, message: Message):
        """Test your userbot ping"""
        start = time.perf_counter_ns()
        message = await utils.answer(message, "<code>üêª Nofin...</code>")

        await utils.answer(
            message,
            self.strings("results_ping").format(
                round((time.perf_counter_ns() - start) / 10**6, 3),
                utils.formatted_uptime(),
            )
            + (
                ("\n\n" + self.strings("ping_hint"))
                if random.choice([0, 0, 2]) == 1
                else ""
            ),
        )

    async def client_ready(self):
        chat, _ = await utils.asset_channel(
            self._client,
            "hikka-logs",
            "üåò Your Hikka logs will appear in this chat",
            silent=True,
            invite_bot=True,
            avatar="https://github.com/hikariatama/assets/raw/master/hikka-logs.png",
        )

        self._logchat = int(f"-100{chat.id}")

        self.watchdog.start()

        logging.getLogger().handlers[0].install_tg_log(self)
        logger.debug("Bot logging installed for %s", self._logchat)

        self._pass_config_to_logger()
